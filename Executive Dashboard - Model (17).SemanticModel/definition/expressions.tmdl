expression GetQualtricsResponses = ```
		let
		    Source = (surveyId as text) as table =>
		let
		    // Define your Qualtrics API token and URL
		    ApiToken = "veGi6YUGLcse66o8QNXOtCMXtYi0fLpdqiK9SYpj",
		    BaseUrl = "https://iad1.qualtrics.com",
		    //surveyId = "SV_6sVhwI30Q0vBfhQ",
		    
		    // Start the response export
		    //StartExportUrl = BaseUrl & "/API/v3//surveys/" & surveyId & "/export-responses",
		    StartExportHeaders = [
		        #"Content-Type" = "application/json",
		        #"X-API-TOKEN" = ApiToken
		    ],
		    StartExportBody = "{""format"":""csv"",""breakoutSets"":true,""compress"":false,""exportResponsesInProgress"":false}", // Specify format and other parameters as needed
		    StartExportResponse = Web.Contents(BaseUrl, [RelativePath = "/API/v3//surveys/" & surveyId & "/export-responses", 
		        Headers = StartExportHeaders,
		        Content = Text.ToBinary(StartExportBody),
		        IsRetry = true
		    ]),
		    StartExportResult = Json.Document(StartExportResponse),
		    ProgressId = StartExportResult[result][progressId],
		
		    // Define a function to check export progress
		        CheckStatusRecursively = (ProgressId as text) as text =>
		        let
		        /*CheckExportStatus = () =>
		        let
		            //CheckProgressUrl = BaseUrl ,*/
		            //response = Web.Contents(BaseUrl & "/API/v3//surveys/" & surveyId & "/export-responses/" & ProgressId,
		            response = Web.Contents(BaseUrl, [RelativePath = "/API/v3//surveys/" & surveyId & "/export-responses/"& ProgressId, 
		            Headers=StartExportHeaders,IsRetry=true]),
		            jsonResponse = Json.Document(response),
		            status = jsonResponse[result][status]
		        /*in 
		             if status = "complete" then
		                jsonResponse[result][fileId]
		            else if status = "inProgress" then
		                "inProgress"
		            else 
		                error "Failed to export or invalid status:" & status,
		        
		        //Loop until the export is complete and return the fileID
		        fileId = List.First(
		            List.Generate(
		            () => CheckExportStatus(),//Function.InvokeAfter(()=>CheckExportStatus(),#duration(0,0,0,2)),
		            each _<>"inProgress",
		            each CheckExportStatus(),//Function.InvokeAfter(()=>CheckExportStatus(),#duration(0,0,0,2)),
		            each _
		            )
		        ),*/
		        in
		         if status = "complete" then
		                jsonResponse[result][fileId]
		              else if status = "inProgress" then
		                // Wait and check again
		                Function.InvokeAfter(()=> @CheckStatusRecursively(ProgressId),#duration(0,0,0,2))
		              else 
		                error "Failed to export or invalid status: " & status,
		        result = Function.InvokeAfter(()=> @CheckStatusRecursively(ProgressId),#duration(0,0,0,2))
		                ,
		
		    // Download the file once export is complete
		    DownloadFile = (fileId as text) =>
		    let
		        fileIdToUse = if fileId = "" then error "No File To Export" else fileId,
		        //FileDownloadUrl = BaseUrl & "/API/v3//surveys/"& surveyId & "/export-responses/"& fileIdToUse & "/file"//,
		        //FileResponse = Web.Contents(FileDownloadUrl, [Headers=#"X-API-KEY"=ApiToken,#"Accept-Encoding"="gzip, deflate"]),
		        FileResponse = Web.Contents(BaseUrl, [RelativePath = "/API/v3//surveys/" & surveyId & "/export-responses/"& fileId & "/file", 
		            Headers=[#"X-API-TOKEN"=ApiToken, #"Accept-Encoding"="gzip, deflate"]]
		        ),
		        #"Imported CSV" = Csv.Document(FileResponse,[Delimiter=",", Columns=163, Encoding=1252, QuoteStyle=QuoteStyle.Csv])
		        in
		       #"Imported CSV",//FileResponse,
		
		    // Check if export is complete
		    ExportStatus = DownloadFile(result)
		
		in
		     ExportStatus
		in
		    Source
		```
	lineageTag: defc012b-980f-420d-b5c7-1a5b21229935
	queryGroup: Surveys

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression 'Diversity - Remove' =
		let
		    Source = Sql.Database("gln-galendatawarehouse-db1-prod.database.windows.net", "gln-datawarehouse", [Query="DECLARE @LASTYEAR DATE = DATEADD(YEAR, -1, GETDATE())#(lf)DECLARE @TWOYEARAGO DATE = DATEADD(YEAR, -2, GETDATE())#(lf)#(lf)SELECT#(lf)S.StudentID, #(lf)S.Gender,#(lf)DATEDIFF(yy, S.BirthDate, GETDATE()) Age,#(lf)DATEDIFF(yy, S.BirthDate, @LASTYEAR) AgeLY,#(lf)DATEDIFF(yy, S.BirthDate, @TWOYEARAGO) Age2Y#(lf)FROM StudentDim S#(lf)WHERE CurrentInd = 1"])
		in
		    Source
	lineageTag: e0f64898-e7e0-40f1-85e6-49a3dd3947fc
	queryGroup: Students

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Diversity_FirstGen =
		let
		    Source = Sql.Database("rpt2-prod.ec.galencollege.edu", "coll18_repl_production", [Query="WITH FIRSTGEN_ISIR AS (/*First Gen attempt using REGENT ISIR */#(lf)#(tab)SELECT#(lf)#(tab)#(tab)X.ID as studentId,#(lf)#(tab)#(tab)CASE WHEN MAX(X.FIRST_GEN_CHECK) = 3 THEN 'N' ELSE 'Y' END AS FIRST_GEN_CHECK, 0 as SO#(lf)#(tab)FROM (#(lf)#(tab)#(tab)SELECT #(lf)#(tab)#(tab)#(tab)SV.externalId1 AS ID,#(lf)#(tab)#(tab)#(tab)IV.eitherParentAttendCollege AS FIRST_GEN_CHECK,#(lf)#(tab)#(tab)#(tab)AV.federalAwardYear AS AWARD_YEAR,#(lf)#(tab)#(tab)#(tab)ROW_NUMBER() OVER (PARTITION BY SV.externalId1 ORDER BY IV.isirRecordDataId DESC) AS ROWZ#(lf)#(tab)#(lf)#(tab)#(tab)FROM #(lf)#(tab)#(tab)#(tab)GALNUBI_production.regent.Student_versioned SV#(lf)#(tab)#(tab)JOIN GALNUBI_production.regent.ISIRRecordData_versioned IV ON SV.studentId = IV.studentId  #(lf)#(tab)#(tab)JOIN GALNUBI_production.regent.AcademicYear_versioned AV ON IV.yearIndicator = AV.academicYearId#(lf)#(tab)#(tab)WHERE #(lf)#(tab)#(tab)#(tab)IV.activeISIR = 1#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)--and SV.externalId1 = 1055103#(lf)#(tab)) X #(lf)#(tab)WHERE #(lf)#(tab)#(tab)ROWZ = 1#(lf)#(tab)GROUP BY #(lf)#(tab)#(tab)X.ID#(lf)),#(lf)Coll_Isir_Data AS (#(lf)SELECT#(lf)#(tab)#(tab)Z.ID AS studentId,#(lf)#(tab)#(tab)MAX(Z.FIRST_GEN_CHECK) AS FIRST_GEN_CHECK,#(lf)#(tab)#(tab)1 AS SO#(lf)#(tab)FROM (#(lf)#(tab)#(tab)SELECT DISTINCT #(lf)#(tab)#(tab)#(tab)X.ID,#(lf)#(tab)#(tab)#(tab)CASE #(lf)#(tab)#(tab)#(tab)#(tab)WHEN X.IFAF_FATHER_GRADE_LVL = 3 OR X.IFAF_MOTHER_GRADE_LVL = 3 THEN 'N'#(lf)#(tab)#(tab)#(tab)#(tab)WHEN X.IFAF_FATHER_GRADE_LVL <> 3  AND X.IFAF_MOTHER_GRADE_LVL <> 3 THEN 'Y'#(lf)#(tab)#(tab)#(tab)#(tab)--ELSE ''#(lf)#(tab)#(tab)#(tab)END AS FIRST_GEN_CHECK#(lf)#(tab)#(tab)FROM (#(lf)#(tab)#(tab)#(tab)SELECT DISTINCT#(lf)#(tab)#(tab)#(tab)#(tab)IFAF_STUDENT_ID AS ID,#(lf)#(tab)#(tab)#(tab)#(tab)FA.IFAF_FATHER_GRADE_LVL,#(lf)#(tab)#(tab)#(tab)#(tab)FA.IFAF_MOTHER_GRADE_LVL#(lf)#(tab)#(tab)#(tab)FROM #(lf)#(tab)#(tab)#(tab)ISIR_FAFSA FA #(lf)#(tab)#(tab)) X#(lf)#(tab)) Z #(lf)#(tab)GROUP BY #(lf)#(tab)#(tab)Z.ID#(lf)),#(lf)CRM_FirstGen AS (#(lf)SELECT G23_CRMDATA_ID AS studentId, cast(G23_RC_1ST_COL_STU as varchar(1)) AS FIRST_GEN_CHECK, 2 AS SO FROM [G23_CRMDATA])#(lf)#(lf)#(lf)SELECT * FROM #(lf)#(tab)(#(lf)#(tab)#(tab)SELECT studentId, FIRST_GEN_CHECK, ROW_NUMBER() OVER (PARTITION BY studentId ORDER BY studentId, SO) AS Pos#(lf)#(tab)#(tab)FROM#(lf)#(tab)#(tab)#(tab)(#(lf)#(tab)#(tab)#(tab)#(tab)SELECT studentId COLLATE database_default as studentId, FIRST_GEN_CHECK COLLATE database_default as FIRST_GEN_CHECK, SO FROM CRM_FirstGen WHERE FIRST_GEN_CHECK IS NOT NULL#(lf)#(tab)#(tab)#(tab)#(tab)UNION#(lf)#(tab)#(tab)#(tab)#(tab)SELECT studentId COLLATE database_default as studentId, FIRST_GEN_CHECK COLLATE database_default as FIRST_GEN_CHECK, SO FROM FIRSTGEN_ISIR WHERE FIRST_GEN_CHECK IS NOT NULL #(lf)#(tab)#(tab)#(tab)#(tab)UNION#(lf)#(tab)#(tab)#(tab)#(tab)SELECT studentId, FIRST_GEN_CHECK, SO FROM Coll_Isir_Data WHERE FIRST_GEN_CHECK IS NOT NULL#(lf)#(tab)#(tab)#(tab)) A#(lf)#(tab)) b #(lf)#(tab)WHERE Pos = 1 #(lf)ORDER BY studentId"]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"studentId", type text}})
		in
		    #"Changed Type"
	lineageTag: 2d0bae32-c022-4e1d-bb09-89b8a3ff4ba9
	queryGroup: Students

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'FACT_Student Load 2Y' =
		let
		    Source = Sql.Database("rpt2-prod.ec.galencollege.edu", "coll18_repl_production", [Query="--for two years in the past: #(lf)DECLARE @LASTYEAR DATE = DATEADD(YEAR, -2, GETDATE())#(lf);WITH StudentProgram#(lf)AS (#(lf)#(tab)SELECT LEFT(SP.STUDENT_PROGRAMS_ID, 7) STUDENT_ID#(lf)#(tab)#(tab),RIGHT(SP.STUDENT_PROGRAMS_ID, LEN(SP.STUDENT_PROGRAMS_ID) - 8) PROGRAM_ID#(lf)#(tab)#(tab),ROW_NUMBER() OVER (#(lf)#(tab)#(tab)#(tab)PARTITION BY LEFT(SP.STUDENT_PROGRAMS_ID, 7) ORDER BY D.STPR_START_DATE DESC#(lf)#(tab)#(tab)#(tab)) MOST_RECENT_PROGRAM#(lf)#(tab)#(tab),SP.STUDENT_PROGRAMS_ID#(lf)#(tab)#(tab),SP.STPR_LOCATION#(lf)#(tab)#(tab),SP.STPR_ADMIT_STATUS#(lf)#(tab)#(tab),SPS.STPR_STATUS#(lf)#(tab)#(tab),SPS.STPR_STATUS_DATE#(lf)#(tab)#(tab),D.STPR_START_DATE#(lf)#(tab)#(tab),D.STPR_END_DATE#(lf)#(tab)#(tab),V.VAL_EXTERNAL_REPRESENTATION ProgramStatus#(lf)#(tab)#(tab),COALESCE(LEAD(STPR_STATUS_DATE) OVER (PARTITION BY SP.STUDENT_PROGRAMS_ID ORDER BY STPR_STATUS_DATE ASC), GETDATE()) as Next_STPR_STATUS_DATE#(lf)#(tab)#(tab),AP.ACPG_ACAD_LEVEL#(lf)#(tab)FROM STUDENT_PROGRAMS SP#(lf)#(tab)LEFT JOIN STPR_DATES D ON SP.STUDENT_PROGRAMS_ID = D.STUDENT_PROGRAMS_ID#(lf)#(tab)#(tab)AND D.POS = 1#(lf)#(tab)LEFT JOIN STPR_STATUSES SPS ON SP.STUDENT_PROGRAMS_ID = SPS.STUDENT_PROGRAMS_ID#(lf)#(tab)LEFT JOIN VALS V ON SPS.STPR_STATUS = V.VAL_INTERNAL_CODE#(lf)#(tab)#(tab)AND V.VALCODE_ID = 'STUDENT.PROGRAM.STATUSES'#(lf)#(tab)LEFT JOIN ACAD_PROGRAMS AP ON AP.ACAD_PROGRAMS_ID = RIGHT(SP.STUDENT_PROGRAMS_ID, LEN(SP.STUDENT_PROGRAMS_ID) - 8)#(lf)#(tab)WHERE 1 = 1#(lf)#(tab)),#(lf)ACCEPTABLE_TERMS AS#(lf)#(tab)(#(lf)#(tab)#(tab)SELECT CASE WHEN @LASTYEAR BETWEEN CT.TERM_START_DATE AND CT.TERM_END_DATE#(lf)#(tab)#(tab)THEN CT.TERMS_ID#(lf)#(tab)#(tab)ELSE PT.PREV_TERM END TERM_TO_BE_USED#(lf)#(tab)#(tab)FROM TERMS CT#(lf)#(tab)#(tab)INNER JOIN (#(lf)#(tab)#(tab)#(tab)SELECT  TERMS_ID,#(lf)#(tab)#(tab)#(tab)LAG(TERMS_ID) OVER (ORDER BY TERM_START_DATE) PREV_TERM, #(lf)#(tab)#(tab)#(tab) LAG(TERM_END_DATE) OVER (ORDER BY TERM_START_DATE) PREV_END_DATE#(lf)#(tab)#(tab)#(tab)FROM TERMS#(lf)#(tab)#(tab)#(tab)WHERE RIGHT(TERMS_ID, 1) = 'Q'#(lf)#(tab)#(tab)#(tab)#(tab))PT ON CT.TERMS_ID = PT.TERMS_ID#(lf)#(tab)#(tab)WHERE RIGHT(CT.TERMS_ID, 1) = 'Q'#(lf)#(tab)#(tab)AND @LASTYEAR BETWEEN PT.PREV_END_DATE AND CT.TERM_END_DATE#(lf)#(tab)#(tab)UNION#(lf)#(tab)#(tab)SELECT TERMS_ID TERM_TO_BE_USED#(lf)#(tab)#(tab)FROM TERMS#(lf)#(tab)#(tab)WHERE @LASTYEAR BETWEEN TERM_START_DATE AND TERM_END_DATE#(lf)#(tab)),#(lf)ENROLLED_IN_CLASS AS (#(lf)#(tab)SELECT DISTINCT SCS_STUDENT #(lf)#(tab)FROM STUDENT_COURSE_SEC SCS#(lf)#(tab)INNER JOIN STC_STATUSES STC ON SCS.SCS_STUDENT_ACAD_CRED = STC.STUDENT_ACAD_CRED_ID AND STC.POS = 1#(lf)#(tab)INNER JOIN COURSE_SECTIONS CS ON SCS.SCS_COURSE_SECTION = CS.COURSE_SECTIONS_ID#(lf)#(tab)INNER JOIN ACCEPTABLE_TERMS T ON CS.SEC_TERM = T.TERM_TO_BE_USED#(lf)#(tab)WHERE STC.STC_STATUS IN ('A','N')#(lf)),#(lf)/*IF STUDENT HAS DIFFERENT LOADS FOR CURRENT TERMS, CHOOSE THE HIGHEST STUDENT LOAD FOR THE PROGRAM*/#(lf)/*OVERLOAD AND FULL TIME ARE FULL TIME EVERYTHING ELSE IF PART TIME*/#(lf)STUDENT_FTPT AS (#(lf)#(tab)SELECT LEFT(STUDENT_TERMS_ID, 7) STUDENT_ID#(lf)#(tab)#(tab)#(tab), RIGHT(STUDENT_TERMS_ID,2) ACAD_LEVEL#(lf)#(tab)#(tab)#(tab), STTR_STUDENT_LOAD#(lf)#(tab)#(tab)    , VAL_EXTERNAL_REPRESENTATION#(lf)#(tab)#(tab)#(tab),ROW_NUMBER() OVER (#(lf)#(tab)#(tab)#(tab)PARTITION BY LEFT(STUDENT_TERMS_ID, 7), RIGHT(STUDENT_TERMS_ID,2) ORDER BY CASE ST.STTR_STUDENT_LOAD WHEN 'O' THEN 0 WHEN 'F' THEN 1 ELSE 2 END, V.POS DESC#(lf)#(tab)#(tab)#(tab)) HIGHEST_LOAD_BY_TERM_ACAD_LEVEL#(lf)#(tab)FROM STUDENT_TERMS ST#(lf)#(tab)INNER JOIN VALS V ON ST.STTR_STUDENT_LOAD = V.VAL_INTERNAL_CODE #(lf)#(tab)                 AND V.VALCODE_ID = 'STUDENT.LOADS'#(lf)#(tab)INNER JOIN ACCEPTABLE_TERMS T ON SUBSTRING(ST.STUDENT_TERMS_ID,9,7) = T.TERM_TO_BE_USED#(lf)#(tab)),#(lf)INDEPENDENT_STUDY AS (#(lf) SELECT DISTINCT SCS.SCS_STUDENT, 'Independent Study' AS INDEPENDENT_STUDY#(lf)#(tab)FROM STUDENT_COURSE_SEC SCS WITH (NOLOCK)#(lf)#(tab)INNER JOIN STC_STATUSES STC  WITH (NOLOCK) ON  SCS.SCS_STUDENT_ACAD_CRED = STC.STUDENT_ACAD_CRED_ID AND STC.POS = 1 AND STC.STC_STATUS IN ('A','N') #(lf)#(tab)INNER JOIN COURSE_SECTIONS CS  WITH (NOLOCK) ON SCS.SCS_COURSE_SECTION = CS.COURSE_SECTIONS_ID#(lf)#(tab)INNER JOIN ACCEPTABLE_TERMS T ON CS.SEC_TERM = T.TERM_TO_BE_USED#(lf)#(tab)WHERE SEC_SHORT_TITLE = 'Independent Study'#(lf)#(tab))#(lf)#(lf)SELECT * FROM (#(lf)SELECT SP.*, L.LOC_DESC, P.FIRST_NAME, P.LAST_NAME, COALESCE(T.VAL_EXTERNAL_REPRESENTATION,INDEPENDENT_STUDY) FTorPT, Year(@LastYear) Year#(lf)FROM StudentProgram SP#(lf)INNER JOIN PERSON P ON SP.STUDENT_ID = P.ID#(lf)INNER JOIN ENROLLED_IN_CLASS EIC ON SP.STUDENT_ID = EIC.SCS_STUDENT#(lf)LEFT JOIN LOCATIONS L ON SP.STPR_LOCATION = L.LOCATIONS_ID#(lf)LEFT JOIN STUDENT_FTPT T ON T.STUDENT_ID = SP.STUDENT_ID AND ACAD_LEVEL = ACPG_ACAD_LEVEL AND HIGHEST_LOAD_BY_TERM_ACAD_LEVEL = 1#(lf)LEFT JOIN INDEPENDENT_STUDY I ON SP.STUDENT_ID = I.SCS_STUDENT#(lf)) A#(lf)WHERE @LASTYEAR BETWEEN STPR_STATUS_DATE and Next_STPR_STATUS_DATE#(lf)AND STPR_STATUS = 'A'#(lf)"]),
		    #"Added Custom" = Table.AddColumn(Source, "Year Sort", each 3)
		in
		    #"Added Custom"
	lineageTag: ad8d323d-990a-4068-90d9-0b7fef92fde0
	queryGroup: 'Student Load'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'FACT_Student Load LY' =
		let
		    Source = Sql.Database("rpt2-prod.ec.galencollege.edu", "coll18_repl_production", [Query="--for one year in the past: #(lf)DECLARE @LASTYEAR DATE = DATEADD(YEAR, -1, GETDATE())#(lf);WITH StudentProgram#(lf)AS (#(lf)#(tab)SELECT LEFT(SP.STUDENT_PROGRAMS_ID, 7) STUDENT_ID#(lf)#(tab)#(tab),RIGHT(SP.STUDENT_PROGRAMS_ID, LEN(SP.STUDENT_PROGRAMS_ID) - 8) PROGRAM_ID#(lf)#(tab)#(tab),ROW_NUMBER() OVER (#(lf)#(tab)#(tab)#(tab)PARTITION BY LEFT(SP.STUDENT_PROGRAMS_ID, 7) ORDER BY D.STPR_START_DATE DESC#(lf)#(tab)#(tab)#(tab)) MOST_RECENT_PROGRAM#(lf)#(tab)#(tab),SP.STUDENT_PROGRAMS_ID#(lf)#(tab)#(tab),SP.STPR_LOCATION#(lf)#(tab)#(tab),SP.STPR_ADMIT_STATUS#(lf)#(tab)#(tab),SPS.STPR_STATUS#(lf)#(tab)#(tab),SPS.STPR_STATUS_DATE#(lf)#(tab)#(tab),D.STPR_START_DATE#(lf)#(tab)#(tab),D.STPR_END_DATE#(lf)#(tab)#(tab),V.VAL_EXTERNAL_REPRESENTATION ProgramStatus#(lf)#(tab)#(tab),COALESCE(LEAD(STPR_STATUS_DATE) OVER (PARTITION BY SP.STUDENT_PROGRAMS_ID ORDER BY STPR_STATUS_DATE ASC), GETDATE()) as Next_STPR_STATUS_DATE#(lf)#(tab)#(tab),AP.ACPG_ACAD_LEVEL#(lf)#(tab)FROM STUDENT_PROGRAMS SP#(lf)#(tab)LEFT JOIN STPR_DATES D ON SP.STUDENT_PROGRAMS_ID = D.STUDENT_PROGRAMS_ID#(lf)#(tab)#(tab)AND D.POS = 1#(lf)#(tab)LEFT JOIN STPR_STATUSES SPS ON SP.STUDENT_PROGRAMS_ID = SPS.STUDENT_PROGRAMS_ID#(lf)#(tab)LEFT JOIN VALS V ON SPS.STPR_STATUS = V.VAL_INTERNAL_CODE#(lf)#(tab)#(tab)AND V.VALCODE_ID = 'STUDENT.PROGRAM.STATUSES'#(lf)#(tab)LEFT JOIN ACAD_PROGRAMS AP ON AP.ACAD_PROGRAMS_ID = RIGHT(SP.STUDENT_PROGRAMS_ID, LEN(SP.STUDENT_PROGRAMS_ID) - 8)#(lf)#(tab)WHERE 1 = 1#(lf)#(tab))#(lf)#(tab)#(lf)#(tab),#(lf)#(tab)ACCEPTABLE_TERMS AS#(lf)#(tab)(#(lf)#(tab)#(tab)SELECT CASE WHEN @LASTYEAR BETWEEN CT.TERM_START_DATE AND CT.TERM_END_DATE#(lf)#(tab)#(tab)THEN CT.TERMS_ID#(lf)#(tab)#(tab)ELSE PT.PREV_TERM END TERM_TO_BE_USED#(lf)#(tab)#(tab)FROM TERMS CT#(lf)#(tab)#(tab)INNER JOIN (#(lf)#(tab)#(tab)#(tab)SELECT  TERMS_ID,#(lf)#(tab)#(tab)#(tab)LAG(TERMS_ID) OVER (ORDER BY TERM_START_DATE) PREV_TERM, #(lf)#(tab)#(tab)#(tab) LAG(TERM_END_DATE) OVER (ORDER BY TERM_START_DATE) PREV_END_DATE#(lf)#(tab)#(tab)#(tab)FROM TERMS#(lf)#(tab)#(tab)#(tab)WHERE RIGHT(TERMS_ID, 1) = 'Q'#(lf)#(tab)#(tab)#(tab)#(tab))PT ON CT.TERMS_ID = PT.TERMS_ID#(lf)#(tab)#(tab)WHERE RIGHT(CT.TERMS_ID, 1) = 'Q'#(lf)#(tab)#(tab)AND @LASTYEAR BETWEEN PT.PREV_END_DATE AND CT.TERM_END_DATE#(lf)#(tab)#(tab)UNION#(lf)#(tab)#(tab)SELECT TERMS_ID TERM_TO_BE_USED#(lf)#(tab)#(tab)FROM TERMS#(lf)#(tab)#(tab)WHERE @LASTYEAR BETWEEN TERM_START_DATE AND TERM_END_DATE#(lf)#(tab)),#(lf)ENROLLED_IN_CLASS AS (#(lf)#(tab)SELECT DISTINCT SCS_STUDENT #(lf)#(tab)FROM STUDENT_COURSE_SEC SCS#(lf)#(tab)INNER JOIN STC_STATUSES STC ON SCS.SCS_STUDENT_ACAD_CRED = STC.STUDENT_ACAD_CRED_ID AND STC.POS = 1#(lf)#(tab)INNER JOIN COURSE_SECTIONS CS ON SCS.SCS_COURSE_SECTION = CS.COURSE_SECTIONS_ID#(lf)#(tab)INNER JOIN ACCEPTABLE_TERMS T ON CS.SEC_TERM = T.TERM_TO_BE_USED#(lf)#(tab)WHERE STC.STC_STATUS IN ('A','N')#(lf)),#(lf)/*IF STUDENT HAS DIFFERENT LOADS FOR CURRENT TERMS, CHOOSE THE HIGHEST STUDENT LOAD FOR THE PROGRAM*/#(lf)/*OVERLOAD AND FULL TIME ARE FULL TIME EVERYTHING ELSE IF PART TIME*/#(lf)STUDENT_FTPT AS (#(lf)#(tab)SELECT LEFT(STUDENT_TERMS_ID, 7) STUDENT_ID#(lf)#(tab)#(tab)#(tab), RIGHT(STUDENT_TERMS_ID,2) ACAD_LEVEL#(lf)#(tab)#(tab)#(tab), STTR_STUDENT_LOAD#(lf)#(tab)#(tab)    , VAL_EXTERNAL_REPRESENTATION#(lf)#(tab)#(tab)#(tab),ROW_NUMBER() OVER (#(lf)#(tab)#(tab)#(tab)PARTITION BY LEFT(STUDENT_TERMS_ID, 7), RIGHT(STUDENT_TERMS_ID,2) ORDER BY CASE ST.STTR_STUDENT_LOAD WHEN 'O' THEN 0 WHEN 'F' THEN 1 ELSE 2 END, V.POS DESC#(lf)#(tab)#(tab)#(tab)) HIGHEST_LOAD_BY_TERM_ACAD_LEVEL#(lf)#(tab)FROM STUDENT_TERMS ST#(lf)#(tab)INNER JOIN VALS V ON ST.STTR_STUDENT_LOAD = V.VAL_INTERNAL_CODE #(lf)#(tab)                 AND V.VALCODE_ID = 'STUDENT.LOADS'#(lf)#(tab)INNER JOIN ACCEPTABLE_TERMS T ON SUBSTRING(ST.STUDENT_TERMS_ID,9,7) = T.TERM_TO_BE_USED#(lf)#(tab)),#(lf)INDEPENDENT_STUDY AS (#(lf) SELECT DISTINCT SCS.SCS_STUDENT, 'Independent Study' AS INDEPENDENT_STUDY#(lf)#(tab)FROM STUDENT_COURSE_SEC SCS WITH (NOLOCK)#(lf)#(tab)INNER JOIN STC_STATUSES STC  WITH (NOLOCK) ON  SCS.SCS_STUDENT_ACAD_CRED = STC.STUDENT_ACAD_CRED_ID AND STC.POS = 1 AND STC.STC_STATUS IN ('A','N') #(lf)#(tab)INNER JOIN COURSE_SECTIONS CS  WITH (NOLOCK) ON SCS.SCS_COURSE_SECTION = CS.COURSE_SECTIONS_ID#(lf)#(tab)INNER JOIN ACCEPTABLE_TERMS T ON CS.SEC_TERM = T.TERM_TO_BE_USED#(lf)#(tab)WHERE SEC_SHORT_TITLE = 'Independent Study'#(lf)#(tab))#(lf)#(lf)SELECT * FROM (#(lf)SELECT SP.*, L.LOC_DESC, P.FIRST_NAME, P.LAST_NAME, COALESCE(T.VAL_EXTERNAL_REPRESENTATION,INDEPENDENT_STUDY) FTorPT, Year(@LastYear) Year#(lf)FROM StudentProgram SP#(lf)LEFT JOIN LOCATIONS L ON SP.STPR_LOCATION = L.LOCATIONS_ID#(lf)INNER JOIN PERSON P ON SP.STUDENT_ID = P.ID#(lf)INNER JOIN ENROLLED_IN_CLASS EIC ON SP.STUDENT_ID = EIC.SCS_STUDENT#(lf)LEFT JOIN STUDENT_FTPT T ON T.STUDENT_ID = SP.STUDENT_ID AND ACAD_LEVEL = ACPG_ACAD_LEVEL AND HIGHEST_LOAD_BY_TERM_ACAD_LEVEL = 1#(lf)LEFT JOIN INDEPENDENT_STUDY I ON SP.STUDENT_ID = I.SCS_STUDENT#(lf)) A#(lf)WHERE @LASTYEAR BETWEEN STPR_STATUS_DATE and Next_STPR_STATUS_DATE#(lf)AND STPR_STATUS = 'A'"]),
		    #"Added Custom" = Table.AddColumn(Source, "Year Sort", each 2)
		in
		    #"Added Custom"
	lineageTag: ed4bc3ae-99a7-40b7-8188-4466c0d5c9ea
	queryGroup: 'Student Load'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'FACT_Student Load CY' =
		let
		    Source = Sql.Database("rpt2-prod.ec.galencollege.edu", "coll18_repl_production", [Query="--Active Students Current Year Terms with Student Load#(lf)#(lf)WITH StudentProgram#(lf)AS (#(lf)#(tab)SELECT LEFT(SP.STUDENT_PROGRAMS_ID, 7) STUDENT_ID#(lf)#(tab)#(tab),RIGHT(SP.STUDENT_PROGRAMS_ID, LEN(SP.STUDENT_PROGRAMS_ID) - 8) PROGRAM_ID#(lf)#(tab)#(tab),ROW_NUMBER() OVER (#(lf)#(tab)#(tab)#(tab)PARTITION BY LEFT(SP.STUDENT_PROGRAMS_ID, 7) ORDER BY D.STPR_START_DATE DESC#(lf)#(tab)#(tab)#(tab)) MOST_RECENT_PROGRAM#(lf)#(tab)#(tab),SP.STUDENT_PROGRAMS_ID#(lf)#(tab)#(tab),SP.STPR_LOCATION#(lf)#(tab)#(tab),SP.STPR_ADMIT_STATUS#(lf)#(tab)#(tab),SPS.STPR_STATUS#(lf)#(tab)#(tab),SPS.STPR_STATUS_DATE#(lf)#(tab)#(tab),D.STPR_START_DATE#(lf)#(tab)#(tab),D.STPR_END_DATE#(lf)#(tab)#(tab),V.VAL_EXTERNAL_REPRESENTATION ProgramStatus#(lf)#(tab)#(tab),A.ADMS_DESC AdmissionStatus#(lf)#(tab)#(tab),AP.ACPG_ACAD_LEVEL#(lf)#(tab)FROM STUDENT_PROGRAMS SP#(lf)#(tab)LEFT JOIN ADMIT_STATUSES A ON SP.STPR_ADMIT_STATUS = A.ADMIT_STATUSES_ID#(lf)#(tab)LEFT JOIN STPR_DATES D ON SP.STUDENT_PROGRAMS_ID = D.STUDENT_PROGRAMS_ID#(lf)#(tab)#(tab)AND D.POS = 1#(lf)#(tab)LEFT JOIN STPR_STATUSES SPS ON SP.STUDENT_PROGRAMS_ID = SPS.STUDENT_PROGRAMS_ID#(lf)#(tab)#(tab)AND SPS.POS = 1#(lf)#(tab)LEFT JOIN VALS V ON SPS.STPR_STATUS = V.VAL_INTERNAL_CODE#(lf)#(tab)#(tab)AND V.VALCODE_ID = 'STUDENT.PROGRAM.STATUSES'#(lf)#(tab)LEFT JOIN ACAD_PROGRAMS AP ON AP.ACAD_PROGRAMS_ID = RIGHT(SP.STUDENT_PROGRAMS_ID, LEN(SP.STUDENT_PROGRAMS_ID) - 8)#(lf)#(tab)WHERE 1 = 1#(lf)#(tab)),#(lf)#(tab)ACCEPTABLE_TERMS AS#(lf)#(tab)(#(lf)#(tab)#(tab)SELECT CASE WHEN GETDATE() BETWEEN CT.TERM_START_DATE AND CT.TERM_END_DATE#(lf)#(tab)#(tab)THEN CT.TERMS_ID#(lf)#(tab)#(tab)ELSE PT.PREV_TERM END TERM_TO_BE_USED#(lf)#(tab)#(tab)FROM TERMS CT#(lf)#(tab)#(tab)INNER JOIN (#(lf)#(tab)#(tab)#(tab)SELECT  TERMS_ID,#(lf)#(tab)#(tab)#(tab)LAG(TERMS_ID) OVER (ORDER BY TERM_START_DATE) PREV_TERM, #(lf)#(tab)#(tab)#(tab) LAG(TERM_END_DATE) OVER (ORDER BY TERM_START_DATE) PREV_END_DATE#(lf)#(tab)#(tab)#(tab)FROM TERMS#(lf)#(tab)#(tab)#(tab)WHERE RIGHT(TERMS_ID, 1) = 'Q'#(lf)#(tab)#(tab)#(tab)#(tab))PT ON CT.TERMS_ID = PT.TERMS_ID#(lf)#(tab)#(tab)WHERE RIGHT(CT.TERMS_ID, 1) = 'Q'#(lf)#(tab)#(tab)AND GETDATE() BETWEEN PT.PREV_END_DATE AND CT.TERM_END_DATE#(lf)#(tab)#(tab)UNION#(lf)#(tab)#(tab)SELECT TERMS_ID TERM_TO_BE_USED#(lf)#(tab)#(tab)FROM TERMS#(lf)#(tab)#(tab)WHERE GETDATE() BETWEEN TERM_START_DATE AND TERM_END_DATE#(lf)#(tab)),#(lf)#(tab)#(lf)ENROLLED_IN_CLASS AS (#(lf)#(tab)SELECT DISTINCT SCS_STUDENT#(lf)#(tab)FROM STUDENT_COURSE_SEC SCS#(lf)#(tab)INNER JOIN STC_STATUSES STC ON SCS.SCS_STUDENT_ACAD_CRED = STC.STUDENT_ACAD_CRED_ID AND STC.POS = 1#(lf)#(tab)INNER JOIN COURSE_SECTIONS CS ON SCS.SCS_COURSE_SECTION = CS.COURSE_SECTIONS_ID#(lf)#(tab)INNER JOIN ACCEPTABLE_TERMS T ON CS.SEC_TERM = T.TERM_TO_BE_USED#(lf)#(tab)WHERE STC.STC_STATUS IN ('A','N')#(lf)),#(lf)/*IF STUDENT HAS DIFFERENT LOADS FOR CURRENT TERMS, CHOOSE THE HIGHEST STUDENT LOAD FOR THE PROGRAM*/#(lf)/*OVERLOAD AND FULL TIME ARE FULL TIME EVERYTHING ELSE IF PART TIME*/#(lf)/*STUDENTS WITH NO STUDENT TERMS ENTRY APPEAR TO BE IN INDEPENDENT STUDY SO THERE ARE 0 CREDITS*/#(lf)STUDENT_FTPT AS (#(lf)#(tab)SELECT LEFT(STUDENT_TERMS_ID, 7) STUDENT_ID#(lf)#(tab)#(tab)#(tab), RIGHT(STUDENT_TERMS_ID,2) ACAD_LEVEL#(lf)#(tab)#(tab)#(tab), STTR_STUDENT_LOAD#(lf)#(tab)#(tab)    , VAL_EXTERNAL_REPRESENTATION#(lf)#(tab)#(tab)#(tab),ROW_NUMBER() OVER (#(lf)#(tab)#(tab)#(tab)PARTITION BY LEFT(STUDENT_TERMS_ID, 7), RIGHT(STUDENT_TERMS_ID,2) ORDER BY CASE ST.STTR_STUDENT_LOAD WHEN 'O' THEN 0 WHEN 'F' THEN 1 ELSE 2 END, V.POS DESC#(lf)#(tab)#(tab)#(tab)) HIGHEST_LOAD_BY_TERM_ACAD_LEVEL#(lf)#(tab)FROM STUDENT_TERMS ST#(lf)#(tab)INNER JOIN VALS V ON ST.STTR_STUDENT_LOAD = V.VAL_INTERNAL_CODE #(lf)#(tab)                 AND V.VALCODE_ID = 'STUDENT.LOADS'#(lf)#(tab)INNER JOIN ACCEPTABLE_TERMS T ON SUBSTRING(ST.STUDENT_TERMS_ID,9,7) = T.TERM_TO_BE_USED#(lf)#(tab)#(tab)#(tab)#(tab)#(tab) ),#(lf)INDEPENDENT_STUDY AS (#(lf) SELECT DISTINCT SCS.SCS_STUDENT, 'Independent Study' AS INDEPENDENT_STUDY#(lf)#(tab)FROM STUDENT_COURSE_SEC SCS WITH (NOLOCK)#(lf)#(tab)INNER JOIN STC_STATUSES STC  WITH (NOLOCK) ON  SCS.SCS_STUDENT_ACAD_CRED = STC.STUDENT_ACAD_CRED_ID AND STC.POS = 1 AND STC.STC_STATUS IN ('A','N') #(lf)#(tab)INNER JOIN COURSE_SECTIONS CS  WITH (NOLOCK) ON SCS.SCS_COURSE_SECTION = CS.COURSE_SECTIONS_ID#(lf)#(tab)INNER JOIN ACCEPTABLE_TERMS T ON CS.SEC_TERM = T.TERM_TO_BE_USED#(lf)#(tab)WHERE SEC_SHORT_TITLE = 'Independent Study'#(lf)#(tab))#(lf)#(lf)SELECT SP.*, L.LOC_DESC, P.FIRST_NAME, P.LAST_NAME, COALESCE(T.VAL_EXTERNAL_REPRESENTATION,INDEPENDENT_STUDY) FTorPT, Year(GETDATE()) Year#(lf)FROM StudentProgram SP#(lf)INNER JOIN PERSON P ON SP.STUDENT_ID = P.ID#(lf)INNER JOIN ENROLLED_IN_CLASS EIC ON SP.STUDENT_ID = EIC.SCS_STUDENT#(lf)LEFT JOIN LOCATIONS L ON SP.STPR_LOCATION = L.LOCATIONS_ID#(lf)LEFT JOIN STUDENT_FTPT T ON T.STUDENT_ID = SP.STUDENT_ID AND ACAD_LEVEL = ACPG_ACAD_LEVEL AND HIGHEST_LOAD_BY_TERM_ACAD_LEVEL = 1#(lf)LEFT JOIN INDEPENDENT_STUDY I ON SP.STUDENT_ID = I.SCS_STUDENT#(lf)WHERE STPR_STATUS = 'A'#(lf)AND STPR_START_DATE <= GETDATE()"]),
		    #"Added Custom" = Table.AddColumn(Source, "Year Sort", each 1)
		in
		    #"Added Custom"
	lineageTag: 10457695-4c96-4959-9b7e-bbc82ed4de81
	queryGroup: 'Student Load'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression SV_9z4UPiyMXXwmCFw =
		let
		    // 1) Load the survey responses
		    Source = GetQualtricsResponses("SV_9z4UPiyMXXwmCFw"),
		
		    // 2) Promote first row into headers
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		
		    // 3) Declare every column / type you originally listed
		    DesiredTypes = {
		        {"StartDate", type text}, {"EndDate", type text}, {"Status", type text}, {"Progress", type text},
		        {"Duration (in seconds)", type text}, {"Finished", type text}, {"RecordedDate", type text},
		        {"ResponseId", type text}, {"DistributionChannel", type text}, {"UserLanguage", type text},
		        {"Q2_1", type text}, {"Q2_2", type text}, {"Q2_3", type text}, {"Q2_4", type text}, {"Q3", type text},
		        {"Q4_1", type text}, {"Q4_2", type text}, {"Q4_3", type text}, {"Q4_4", type text}, {"Q4_5", type text},
		        {"Q4_6", type text}, {"Q4_7", type text}, {"Q4_8", type text}, {"Q5", type text},
		        {"Q6_1", type text}, {"Q6_2", type text}, {"Q6_3", type text}, {"Q6_4", type text},
		        {"Q6_5", type text}, {"Q6_6", type text}, {"Q6_7", type text}, {"Q6_8", type text},
		        {"Q7", type text}, {"Q8", type text}, {"Q9_1", type text}, {"Q9_2", type text}, {"Q9_3", type text},
		        {"Q9_4", type text}, {"Q9_5", type text}, {"Q9_6", type text}, {"Q9_7", type text}, {"Q10", type text},
		        {"Q11_1", type text}, {"Q11_2", type text}, {"Q11_3", type text}, {"Q11_4", type text},
		        {"Q11_5", type text}, {"Q11_6", type text}, {"Q11_7", type text}, {"Q11_8", type text},
		        {"Q12", type text}, {"Q13", type text}, {"Q14", type text}, {"Q15", type text}, {"Q16", type text},
		        {"Q17", type text}, {"Q19", type text}, {"Q20", type text},
		        {"courseId", type text}, {"courseName", type text}, {"courseCode", type text},
		        {"courseStartDate", type text}, {"courseEndDate", type text}, {"courseComponent", type text},
		        {"termType", type text}, {"termId", type text}, {"termName", type text},
		        {"termStartDate", type text}, {"termEndDate", type text},
		        {"studentProgramRegion", type text}, {"studentProgramState", type text}, {"studentProgramCampus", type text},
		        {"studentProgramId", type text}, {"studentProgram", type text},
		        {"gender", type text}, {"age", type text}, {"firstGen", type text}, {"IPEDSRaceEthnicity", type text},
		        {"courseDepartment", type text}, {"courseSectionRegion", type text}, {"courseSectionState", type text},
		        {"courseSectionCampus", type text}, {"modality", type text}, {"preVsPostLicensure", type text},
		        {"primaryFacultyRegion_1", type text}, {"primaryFacultyState_1", type text}, {"primaryFacultyCampus_1", type text},
		        {"facultyStatus_1", type text}, {"facultyLoad_1", type text}, {"dashboardReleaseDate", type text},
		        {"recordAddedModified", type text}, {"courseSectionTotalEnrolled", type text},
		        {"courseSectionInstructorCount_1", type text}, {"courseSectionTotalResponses", type text},
		        {"courseTotalEnrolled", type text}, {"courseInstructorCount_1", type text}, {"courseTotalResponses", type text},
		        {"delete", type text}, {"courseProgram", type text}, {"course_details", type text},
		        // teacher IDs
		        {"teacherId_1", type text}, {"teacherId_2", type text}, {"teacherId_3", type text}, {"teacherId_4", type text},
		        {"teacherId_5", type text}, {"teacherId_6", type text}, {"teacherId_7", type text}, {"teacherId_8", type text},
		        {"teacherId_9", type text}, {"teacherId_10", type text}, {"teacherId_11", type text}, {"teacherId_12", type text},
		        {"teacherId_13", type text}, {"teacherId_14", type text}, {"teacherId_15", type text}, {"teacherIdList", type text},
		        // teacher names
		        {"teacherFirstName_1", type text}, {"teacherFirstName_2", type text}, {"teacherFirstName_3", type text},
		        {"teacherFirstName_4", type text}, {"teacherFirstName_5", type text}, {"teacherFirstName_6", type text},
		        {"teacherFirstName_7", type text}, {"teacherFirstName_8", type text}, {"teacherFirstName_9", type text},
		        {"teacherFirstName_10", type text}, {"teacherFirstName_11", type text}, {"teacherFirstName_12", type text},
		        {"teacherFirstName_13", type text}, {"teacherFirstName_14", type text}, {"teacherFirstName_15", type text},
		        {"teacherLastName_1", type text}, {"teacherLastName_2", type text}, {"teacherLastName_3", type text},
		        {"teacherLastName_4", type text}, {"teacherLastName_5", type text}, {"teacherLastName_6", type text},
		        {"teacherLastName_7", type text}, {"teacherLastName_8", type text}, {"teacherLastName_9", type text},
		        {"teacherLastName_10", type text}, {"teacherLastName_11", type text}, {"teacherLastName_12", type text},
		        {"teacherLastName_13", type text}, {"teacherLastName_14", type text}, {"teacherLastName_15", type text},
		        {"teacherFullNameList", type text},
		        // teacher emails
		        {"teacherEmail_1", type text}, {"teacherEmail_2", type text}, {"teacherEmail_3", type text},
		        {"teacherEmail_4", type text}, {"teacherEmail_5", type text}, {"teacherEmail_6", type text},
		        {"teacherEmail_7", type text}, {"teacherEmail_8", type text}, {"teacherEmail_9", type text},
		        {"teacherEmail_10", type text}, {"teacherEmail_11", type text}, {"teacherEmail_12", type text},
		        {"teacherEmail_13", type text}, {"teacherEmail_14", type text}, {"teacherEmail_15", type text},
		        {"teacherEmailList", type text}
		    },
		
		    // 4) Only keep the (column,type) pairs where the column exists
		    AvailableColumns = Table.ColumnNames(#"Promoted Headers"),
		    SafeTypeList = List.Select(DesiredTypes, each List.Contains(AvailableColumns, _{0})),
		
		    // 5) Apply those type changes
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers", SafeTypeList),
		
		    // 6) Select the final reporting columns
		    #"Removed Other Columns" = Table.SelectColumns(
		        #"Changed Type",
		        {"ResponseId", "Q8", "courseId", "termId", "studentProgramRegion",
		         "studentProgramCampus", "studentProgramId", "studentProgram",
		         "courseSectionTotalEnrolled"}
		    ),
		
		    // 7) Filter out Qualtrics header rows
		    #"Filtered Rows" = Table.SelectRows(
		        #"Removed Other Columns",
		        each [ResponseId] <> "Response ID" and [ResponseId] <> "{""ImportId"":""_recordId""}"
		    ),
		
		    // 8) Cast enrollment count to integer
		    #"Changed Type1" = Table.TransformColumnTypes(
		        #"Filtered Rows",
		        {{"courseSectionTotalEnrolled", Int64.Type}}
		    )
		in
		    #"Changed Type1"
		
		
		// let
		//     Source = GetQualtricsResponses("SV_9z4UPiyMXXwmCFw"),
		//      #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		//     #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"StartDate", type text}, {"EndDate", type text}, {"Status", type text}, {"Progress", type text}, {"Duration (in seconds)", type text}, {"Finished", type text}, {"RecordedDate", type text}, {"ResponseId", type text}, {"DistributionChannel", type text}, {"UserLanguage", type text}, {"Q2_1", type text}, {"Q2_2", type text}, {"Q2_3", type text}, {"Q2_4", type text}, {"Q3", type text}, {"Q4_1", type text}, {"Q4_2", type text}, {"Q4_3", type text}, {"Q4_4", type text}, {"Q4_5", type text}, {"Q4_6", type text}, {"Q4_7", type text}, {"Q4_8", type text}, {"Q5", type text}, {"Q6_1", type text}, {"Q6_2", type text}, {"Q6_3", type text}, {"Q6_4", type text}, {"Q6_5", type text}, {"Q6_6", type text}, {"Q6_7", type text}, {"Q6_8", type text}, {"Q7", type text}, {"Q8", type text}, {"Q9_1", type text}, {"Q9_2", type text}, {"Q9_3", type text}, {"Q9_4", type text}, {"Q9_5", type text}, {"Q9_6", type text}, {"Q9_7", type text}, {"Q10", type text}, {"Q11_1", type text}, {"Q11_2", type text}, {"Q11_3", type text}, {"Q11_4", type text}, {"Q11_5", type text}, {"Q11_6", type text}, {"Q11_7", type text}, {"Q11_8", type text}, {"Q12", type text}, {"Q13", type text}, {"Q14", type text}, {"Q15", type text}, {"Q16", type text}, {"Q17", type text}, {"Q19", type text}, {"Q20", type text}, {"courseId", type text}, {"courseName", type text}, {"courseCode", type text}, {"courseStartDate", type text}, {"courseEndDate", type text}, {"courseComponent", type text}, {"termType", type text}, {"termId", type text}, {"termName", type text}, {"termStartDate", type text}, {"termEndDate", type text}, {"studentProgramRegion", type text}, {"studentProgramState", type text}, {"studentProgramCampus", type text}, {"studentProgramId", type text}, {"studentProgram", type text}, {"gender", type text}, {"age", type text}, {"firstGen", type text}, {"IPEDSRaceEthnicity", type text}, {"courseDepartment", type text}, {"courseSectionRegion", type text}, {"courseSectionState", type text}, {"courseSectionCampus", type text}, {"modality", type text}, {"preVsPostLicensure", type text}, {"primaryFacultyRegion_1", type text}, {"primaryFacultyState_1", type text}, {"primaryFacultyCampus_1", type text}, {"facultyStatus_1", type text}, {"facultyLoad_1", type text}, {"dashboardReleaseDate", type text}, {"recordAddedModified", type text}, {"courseSectionTotalEnrolled", type text}, {"courseSectionInstructorCount_1", type text}, {"courseSectionTotalResponses", type text}, {"courseTotalEnrolled", type text}, {"courseInstructorCount_1", type text}, {"courseTotalResponses", type text}, {"delete", type text}, {"courseProgram", type text}, {"course_details", type text}, {"teacherId_1", type text}, {"teacherId_2", type text}, {"teacherId_3", type text}, {"teacherId_4", type text}, {"teacherId_5", type text}, {"teacherId_6", type text}, {"teacherId_7", type text}, {"teacherId_8", type text}, {"teacherId_9", type text}, {"teacherId_10", type text}, {"teacherId_11", type text}, {"teacherId_12", type text}, {"teacherId_13", type text}, {"teacherId_14", type text}, {"teacherId_15", type text}, {"teacherIdList", type text}, {"teacherFirstName_1", type text}, {"teacherFirstName_2", type text}, {"teacherFirstName_3", type text}, {"teacherFirstName_4", type text}, {"teacherFirstName_5", type text}, {"teacherFirstName_6", type text}, {"teacherFirstName_7", type text}, {"teacherFirstName_8", type text}, {"teacherFirstName_9", type text}, {"teacherFirstName_10", type text}, {"teacherFirstName_11", type text}, {"teacherFirstName_12", type text}, {"teacherFirstName_13", type text}, {"teacherFirstName_14", type text}, {"teacherFirstName_15", type text}, {"teacherLastName_1", type text}, {"teacherLastName_2", type text}, {"teacherLastName_3", type text}, {"teacherLastName_4", type text}, {"teacherLastName_5", type text}, {"teacherLastName_6", type text}, {"teacherLastName_7", type text}, {"teacherLastName_8", type text}, {"teacherLastName_9", type text}, {"teacherLastName_10", type text}, {"teacherLastName_11", type text}, {"teacherLastName_12", type text}, {"teacherLastName_13", type text}, {"teacherLastName_14", type text}, {"teacherLastName_15", type text}, {"teacherFullNameList", type text}, {"teacherEmail_1", type text}, {"teacherEmail_2", type text}, {"teacherEmail_3", type text}, {"teacherEmail_4", type text}, {"teacherEmail_5", type text}, {"teacherEmail_6", type text}, {"teacherEmail_7", type text}, {"teacherEmail_8", type text}, {"teacherEmail_9", type text}, {"teacherEmail_10", type text}, {"teacherEmail_11", type text}, {"teacherEmail_12", type text}, {"teacherEmail_13", type text}, {"teacherEmail_14", type text}, {"teacherEmail_15", type text}, {"teacherEmailList", type text}}),
		//     #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{"ResponseId", "Q8", "courseId", "termId", "studentProgramRegion","studentProgramCampus","studentProgramId","studentProgram","courseSectionTotalEnrolled"}),
		//     #"Filtered Rows" = Table.SelectRows(#"Removed Other Columns", each ([ResponseId] <> "Response ID" and [ResponseId] <> "{""ImportId"":""_recordId""}")),
		//     #"Changed Type1" = Table.TransformColumnTypes(#"Filtered Rows",{{"courseSectionTotalEnrolled", Int64.Type}})
		// in
		//     #"Changed Type1"
	lineageTag: 8b9b7366-089b-449d-89e0-4e993a36d2d2
	queryGroup: Surveys

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression SV_aVva3lzdXYwgJ9Q =
		let
		    // 1) Pull the Qualtrics responses
		    Source = GetQualtricsResponses("SV_aVva3lzdXYwgJ9Q"),
		
		    // 2) Promote first row into headers
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		
		    // 3) List every column/type you originally had
		    DesiredTypes = {
		        {"StartDate", type text}, {"EndDate", type text}, {"Status", type text}, {"Progress", type text},
		        {"Duration (in seconds)", type text}, {"Finished", type text}, {"RecordedDate", type text},
		        {"ResponseId", type text}, {"DistributionChannel", type text}, {"UserLanguage", type text},
		        {"Q2_1", type text}, {"Q2_2", type text}, {"Q2_3", type text}, {"Q2_4", type text}, {"Q3", type text},
		        {"Q4_1", type text}, {"Q4_2", type text}, {"Q4_3", type text}, {"Q4_4", type text}, {"Q4_5", type text},
		        {"Q4_6", type text}, {"Q4_7", type text}, {"Q4_8", type text}, {"Q5", type text},
		        {"Q6_1", type text}, {"Q6_2", type text}, {"Q6_3", type text}, {"Q6_4", type text},
		        {"Q6_5", type text}, {"Q6_6", type text}, {"Q6_7", type text}, {"Q6_8", type text},
		        {"Q7", type text}, {"Q8", type text}, {"Q9_1", type text}, {"Q9_2", type text}, {"Q9_3", type text},
		        {"Q9_4", type text}, {"Q9_5", type text}, {"Q9_6", type text}, {"Q9_7", type text}, {"Q10", type text},
		        {"Q11_1", type text}, {"Q11_2", type text}, {"Q11_3", type text}, {"Q11_4", type text},
		        {"Q11_5", type text}, {"Q11_6", type text}, {"Q11_7", type text}, {"Q11_8", type text},
		        {"Q12", type text}, {"Q13", type text}, {"Q14", type text}, {"Q15", type text}, {"Q16", type text},
		        {"Q17", type text}, {"Q19", type text}, {"Q20", type text},
		        {"courseId", type text}, {"courseName", type text}, {"courseCode", type text},
		        {"courseStartDate", type text}, {"courseEndDate", type text}, {"courseComponent", type text},
		        {"termType", type text}, {"termId", type text}, {"termName", type text},
		        {"termStartDate", type text}, {"termEndDate", type text},
		        {"studentProgramRegion", type text}, {"studentProgramState", type text}, {"studentProgramCampus", type text},
		        {"studentProgramId", type text}, {"studentProgram", type text},
		        {"gender", type text}, {"age", type text}, {"firstGen", type text}, {"IPEDSRaceEthnicity", type text},
		        {"courseDepartment", type text}, {"courseSectionRegion", type text}, {"courseSectionState", type text},
		        {"courseSectionCampus", type text}, {"modality", type text}, {"preVsPostLicensure", type text},
		        {"primaryFacultyRegion_1", type text}, {"primaryFacultyState_1", type text}, {"primaryFacultyCampus_1", type text},
		        {"facultyStatus_1", type text}, {"facultyLoad_1", type text}, {"dashboardReleaseDate", type text},
		        {"recordAddedModified", type text}, {"courseSectionTotalEnrolled", type text},
		        {"courseSectionInstructorCount_1", type text}, {"courseSectionTotalResponses", type text},
		        {"courseTotalEnrolled", type text}, {"courseInstructorCount_1", type text}, {"courseTotalResponses", type text},
		        {"delete", type text}, {"courseProgram", type text}, {"course_details", type text},
		        // teacher IDs
		        {"teacherId_1", type text}, {"teacherId_2", type text}, {"teacherId_3", type text}, {"teacherId_4", type text},
		        {"teacherId_5", type text}, {"teacherId_6", type text}, {"teacherId_7", type text}, {"teacherId_8", type text},
		        {"teacherId_9", type text}, {"teacherId_10", type text}, {"teacherId_11", type text}, {"teacherId_12", type text},
		        {"teacherId_13", type text}, {"teacherId_14", type text}, {"teacherId_15", type text}, {"teacherIdList", type text},
		        // teacher names
		        {"teacherFirstName_1", type text}, {"teacherFirstName_2", type text}, {"teacherFirstName_3", type text},
		        {"teacherFirstName_4", type text}, {"teacherFirstName_5", type text}, {"teacherFirstName_6", type text},
		        {"teacherFirstName_7", type text}, {"teacherFirstName_8", type text}, {"teacherFirstName_9", type text},
		        {"teacherFirstName_10", type text}, {"teacherFirstName_11", type text}, {"teacherFirstName_12", type text},
		        {"teacherFirstName_13", type text}, {"teacherFirstName_14", type text}, {"teacherFirstName_15", type text},
		        {"teacherLastName_1", type text}, {"teacherLastName_2", type text}, {"teacherLastName_3", type text},
		        {"teacherLastName_4", type text}, {"teacherLastName_5", type text}, {"teacherLastName_6", type text},
		        {"teacherLastName_7", type text}, {"teacherLastName_8", type text}, {"teacherLastName_9", type text},
		        {"teacherLastName_10", type text}, {"teacherLastName_11", type text}, {"teacherLastName_12", type text},
		        {"teacherLastName_13", type text}, {"teacherLastName_14", type text}, {"teacherLastName_15", type text},
		        {"teacherFullNameList", type text},
		        // teacher emails
		        {"teacherEmail_1", type text}, {"teacherEmail_2", type text}, {"teacherEmail_3", type text},
		        {"teacherEmail_4", type text}, {"teacherEmail_5", type text}, {"teacherEmail_6", type text},
		        {"teacherEmail_7", type text}, {"teacherEmail_8", type text}, {"teacherEmail_9", type text},
		        {"teacherEmail_10", type text}, {"teacherEmail_11", type text}, {"teacherEmail_12", type text},
		        {"teacherEmail_13", type text}, {"teacherEmail_14", type text}, {"teacherEmail_15", type text},
		        {"teacherEmailList", type text}
		    },
		
		    // 4) Build the subset of DesiredTypes for which the column actually exists
		    AvailableColumns = Table.ColumnNames(#"Promoted Headers"),
		    SafeTypeList = List.Select(DesiredTypes, each List.Contains(AvailableColumns, _{0})),
		
		    // 5) Apply only those type changes
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers", SafeTypeList),
		
		    // 6) Keep your final reporting fields
		    #"Removed Other Columns" = Table.SelectColumns(
		        #"Changed Type",
		        {"ResponseId", "Q8", "courseId", "termId", "studentProgramRegion",
		         "studentProgramCampus", "studentProgramId", "studentProgram",
		         "courseSectionTotalEnrolled"}
		    ),
		
		    // 7) Filter out Qualtrics header‑injection rows
		    #"Filtered Rows" = Table.SelectRows(
		        #"Removed Other Columns",
		        each [ResponseId] <> "Response ID" and [ResponseId] <> "{""ImportId"":""_recordId""}"
		    ),
		
		    // 8) Cast enrollment to integer
		    #"Changed Type1" = Table.TransformColumnTypes(
		        #"Filtered Rows",
		        {{"courseSectionTotalEnrolled", Int64.Type}}
		    )
		in
		    #"Changed Type1"
		
		
		
		// let
		//     Source = GetQualtricsResponses("SV_aVva3lzdXYwgJ9Q"),
		//     #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		//     #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"StartDate", type text}, {"EndDate", type text}, {"Status", type text}, {"Progress", type text}, {"Duration (in seconds)", type text}, {"Finished", type text}, {"RecordedDate", type text}, {"ResponseId", type text}, {"DistributionChannel", type text}, {"UserLanguage", type text}, {"Q2_1", type text}, {"Q2_2", type text}, {"Q2_3", type text}, {"Q2_4", type text}, {"Q3", type text}, {"Q4_1", type text}, {"Q4_2", type text}, {"Q4_3", type text}, {"Q4_4", type text}, {"Q4_5", type text}, {"Q4_6", type text}, {"Q4_7", type text}, {"Q4_8", type text}, {"Q5", type text}, {"Q6_1", type text}, {"Q6_2", type text}, {"Q6_3", type text}, {"Q6_4", type text}, {"Q6_5", type text}, {"Q6_6", type text}, {"Q6_7", type text}, {"Q6_8", type text}, {"Q7", type text}, {"Q8", type text}, {"Q9_1", type text}, {"Q9_2", type text}, {"Q9_3", type text}, {"Q9_4", type text}, {"Q9_5", type text}, {"Q9_6", type text}, {"Q9_7", type text}, {"Q10", type text}, {"Q11_1", type text}, {"Q11_2", type text}, {"Q11_3", type text}, {"Q11_4", type text}, {"Q11_5", type text}, {"Q11_6", type text}, {"Q11_7", type text}, {"Q11_8", type text}, {"Q12", type text}, {"Q13", type text}, {"Q14", type text}, {"Q15", type text}, {"Q16", type text}, {"Q17", type text}, {"Q19", type text}, {"Q20", type text}, {"courseId", type text}, {"courseName", type text}, {"courseCode", type text}, {"courseStartDate", type text}, {"courseEndDate", type text}, {"courseComponent", type text}, {"termType", type text}, {"termId", type text}, {"termName", type text}, {"termStartDate", type text}, {"termEndDate", type text}, {"studentProgramRegion", type text}, {"studentProgramState", type text}, {"studentProgramCampus", type text}, {"studentProgramId", type text}, {"studentProgram", type text}, {"gender", type text}, {"age", type text}, {"firstGen", type text}, {"IPEDSRaceEthnicity", type text}, {"courseDepartment", type text}, {"courseSectionRegion", type text}, {"courseSectionState", type text}, {"courseSectionCampus", type text}, {"modality", type text}, {"preVsPostLicensure", type text}, {"primaryFacultyRegion_1", type text}, {"primaryFacultyState_1", type text}, {"primaryFacultyCampus_1", type text}, {"facultyStatus_1", type text}, {"facultyLoad_1", type text}, {"dashboardReleaseDate", type text}, {"recordAddedModified", type text}, {"courseSectionTotalEnrolled", type text}, {"courseSectionInstructorCount_1", type text}, {"courseSectionTotalResponses", type text}, {"courseTotalEnrolled", type text}, {"courseInstructorCount_1", type text}, {"courseTotalResponses", type text}, {"delete", type text}, {"courseProgram", type text}, {"course_details", type text}, {"teacherId_1", type text}, {"teacherId_2", type text}, {"teacherId_3", type text}, {"teacherId_4", type text}, {"teacherId_5", type text}, {"teacherId_6", type text}, {"teacherId_7", type text}, {"teacherId_8", type text}, {"teacherId_9", type text}, {"teacherId_10", type text}, {"teacherId_11", type text}, {"teacherId_12", type text}, {"teacherId_13", type text}, {"teacherId_14", type text}, {"teacherId_15", type text}, {"teacherIdList", type text}, {"teacherFirstName_1", type text}, {"teacherFirstName_2", type text}, {"teacherFirstName_3", type text}, {"teacherFirstName_4", type text}, {"teacherFirstName_5", type text}, {"teacherFirstName_6", type text}, {"teacherFirstName_7", type text}, {"teacherFirstName_8", type text}, {"teacherFirstName_9", type text}, {"teacherFirstName_10", type text}, {"teacherFirstName_11", type text}, {"teacherFirstName_12", type text}, {"teacherFirstName_13", type text}, {"teacherFirstName_14", type text}, {"teacherFirstName_15", type text}, {"teacherLastName_1", type text}, {"teacherLastName_2", type text}, {"teacherLastName_3", type text}, {"teacherLastName_4", type text}, {"teacherLastName_5", type text}, {"teacherLastName_6", type text}, {"teacherLastName_7", type text}, {"teacherLastName_8", type text}, {"teacherLastName_9", type text}, {"teacherLastName_10", type text}, {"teacherLastName_11", type text}, {"teacherLastName_12", type text}, {"teacherLastName_13", type text}, {"teacherLastName_14", type text}, {"teacherLastName_15", type text}, {"teacherFullNameList", type text}, {"teacherEmail_1", type text}, {"teacherEmail_2", type text}, {"teacherEmail_3", type text}, {"teacherEmail_4", type text}, {"teacherEmail_5", type text}, {"teacherEmail_6", type text}, {"teacherEmail_7", type text}, {"teacherEmail_8", type text}, {"teacherEmail_9", type text}, {"teacherEmail_10", type text}, {"teacherEmail_11", type text}, {"teacherEmail_12", type text}, {"teacherEmail_13", type text}, {"teacherEmail_14", type text}, {"teacherEmail_15", type text}, {"teacherEmailList", type text}}),
		//     #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{"ResponseId", "Q8", "courseId", "termId", "studentProgramRegion","studentProgramCampus","studentProgramId","studentProgram","courseSectionTotalEnrolled"}),
		//     #"Filtered Rows" = Table.SelectRows(#"Removed Other Columns", each ([ResponseId] <> "Response ID" and [ResponseId] <> "{""ImportId"":""_recordId""}")),
		//     #"Changed Type1" = Table.TransformColumnTypes(#"Filtered Rows",{{"courseSectionTotalEnrolled", Int64.Type}})
		// in
		//     #"Changed Type1"
	lineageTag: 02a9da58-5feb-4221-954d-9880cd1b4f87
	queryGroup: Surveys

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression SV_3r4As4GiRrtECdE =
		let
		    // 1) Pull in the survey
		    Source = GetQualtricsResponses("SV_3r4As4GiRrtECdE"),
		
		    // 2) Promote first row to headers
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		
		    // 3) Define every column/type you originally listed
		    DesiredTypes = {
		        {"StartDate", type text}, {"EndDate", type text}, {"Status", type text}, {"Progress", type text},
		        {"Duration (in seconds)", type text}, {"Finished", type text}, {"RecordedDate", type text},
		        {"ResponseId", type text}, {"DistributionChannel", type text}, {"UserLanguage", type text},
		        {"Q1", type text}, {"Q2_1", type text}, {"Q2_2", type text}, {"Q2_3", type text}, {"Q2_4", type text},
		        {"Q3", type text}, {"Q4_1", type text}, {"Q4_2", type text}, {"Q4_3", type text}, {"Q4_4", type text},
		        {"Q4_5", type text}, {"Q4_6", type text}, {"Q4_7", type text}, {"Q4_8", type text}, {"Q5", type text},
		        {"Q6_1", type text}, {"Q6_2", type text}, {"Q6_3", type text}, {"Q6_4", type text}, {"Q6_5", type text},
		        {"Q6_6", type text}, {"Q6_7", type text}, {"Q6_8", type text}, {"Q7", type text}, {"Q8", type text},
		        {"Q9_1", type text}, {"Q9_2", type text}, {"Q9_3", type text}, {"Q9_4", type text}, {"Q9_5", type text},
		        {"Q9_6", type text}, {"Q9_7", type text}, {"Q10", type text}, {"Q11_1", type text}, {"Q11_2", type text},
		        {"Q11_3", type text}, {"Q11_4", type text}, {"Q11_5", type text}, {"Q11_6", type text}, {"Q11_7", type text},
		        {"Q11_8", type text}, {"Q12", type text}, {"Q13", type text}, {"Q14", type text}, {"Q15", type text},
		        {"Q16", type text}, {"Q17", type text}, {"Q19", type text}, {"Q20", type text},
		        {"courseId", type text}, {"courseName", type text}, {"courseCode", type text},
		        {"courseStartDate", type text}, {"courseEndDate", type text}, {"courseComponent", type text},
		        {"termType", type text}, {"termId", type text}, {"termName", type text},
		        {"termStartDate", type text}, {"termEndDate", type text},
		        {"studentProgramRegion", type text}, {"studentProgramState", type text}, {"studentProgramCampus", type text},
		        {"studentProgramId", type text}, {"studentProgram", type text},
		        {"gender", type text}, {"age", type text}, {"firstGen", type text}, {"IPEDSRaceEthnicity", type text},
		        {"courseDepartment", type text}, {"courseSectionRegion", type text}, {"courseSectionState", type text},
		        {"courseSectionCampus", type text}, {"modality", type text}, {"preVsPostLicensure", type text},
		        {"primaryFacultyRegion_1", type text}, {"primaryFacultyState_1", type text}, {"primaryFacultyCampus_1", type text},
		        {"facultyStatus_1", type text}, {"facultyLoad_1", type text}, {"dashboardReleaseDate", type text},
		        {"recordAddedModified", type text}, {"courseSectionTotalEnrolled", type text},
		        {"courseSectionInstructorCount_1", type text}, {"courseSectionTotalResponses", type text},
		        {"courseTotalEnrolled", type text}, {"courseInstructorCount_1", type text}, {"courseTotalResponses", type text},
		        {"delete", type text}, {"courseProgram", type text}, {"course_details", type text},
		        // teacherId and names
		        {"teacherId_1", type text}, {"teacherId_2", type text}, {"teacherId_3", type text}, {"teacherId_4", type text},
		        {"teacherId_5", type text}, {"teacherId_6", type text}, {"teacherId_7", type text}, {"teacherId_8", type text},
		        {"teacherId_9", type text}, {"teacherId_10", type text}, {"teacherId_11", type text}, {"teacherId_12", type text},
		        {"teacherId_13", type text}, {"teacherId_14", type text}, {"teacherId_15", type text}, {"teacherIdList", type text},
		        {"teacherFirstName_1", type text}, {"teacherFirstName_2", type text}, {"teacherFirstName_3", type text},
		        {"teacherFirstName_4", type text}, {"teacherFirstName_5", type text}, {"teacherFirstName_6", type text},
		        {"teacherFirstName_7", type text}, {"teacherFirstName_8", type text}, {"teacherFirstName_9", type text},
		        {"teacherFirstName_10", type text}, {"teacherFirstName_11", type text}, {"teacherFirstName_12", type text},
		        {"teacherFirstName_13", type text}, {"teacherFirstName_14", type text}, {"teacherFirstName_15", type text},
		        {"teacherLastName_1", type text}, {"teacherLastName_2", type text}, {"teacherLastName_3", type text},
		        {"teacherLastName_4", type text}, {"teacherLastName_5", type text}, {"teacherLastName_6", type text},
		        {"teacherLastName_7", type text}, {"teacherLastName_8", type text}, {"teacherLastName_9", type text},
		        {"teacherLastName_10", type text}, {"teacherLastName_11", type text}, {"teacherLastName_12", type text},
		        {"teacherLastName_13", type text}, {"teacherLastName_14", type text}, {"teacherLastName_15", type text},
		        {"teacherFullNameList", type text},
		        // teacherEmail
		        {"teacherEmail_1", type text}, {"teacherEmail_2", type text}, {"teacherEmail_3", type text},
		        {"teacherEmail_4", type text}, {"teacherEmail_5", type text}, {"teacherEmail_6", type text},
		        {"teacherEmail_7", type text}, {"teacherEmail_8", type text}, {"teacherEmail_9", type text},
		        {"teacherEmail_10", type text}, {"teacherEmail_11", type text}, {"teacherEmail_12", type text},
		        {"teacherEmail_13", type text}, {"teacherEmail_14", type text}, {"teacherEmail_15", type text},
		        {"teacherEmailList", type text}
		    },
		
		    // 4) Filter to only those DesiredTypes whose column actually exists
		    AvailableColumns = Table.ColumnNames(#"Promoted Headers"),
		    SafeTypeList = List.Select(DesiredTypes, each List.Contains(AvailableColumns, _{0})),
		
		    // 5) Apply types
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers", SafeTypeList),
		
		    // 6) Keep only the columns you need in the end
		    #"Removed Other Columns" = Table.SelectColumns(
		        #"Changed Type",
		        {"ResponseId", "Q8", "courseId", "termId", "studentProgramRegion", "studentProgramCampus",
		         "studentProgramId", "studentProgram", "courseSectionTotalEnrolled"}
		    ),
		
		    // 7) Filter out header‑rows injected by Qualtrics
		    #"Filtered Rows" = Table.SelectRows(
		        #"Removed Other Columns",
		        each [ResponseId] <> "Response ID" and [ResponseId] <> "{""ImportId"":""_recordId""}"
		    ),
		
		    // 8) Cast your enrollment count to integer
		    #"Changed Type1" = Table.TransformColumnTypes(
		        #"Filtered Rows",
		        {{"courseSectionTotalEnrolled", Int64.Type}}
		    )
		in
		    #"Changed Type1"
		
		
		// let
		//     Source = GetQualtricsResponses("SV_3r4As4GiRrtECdE"),
		//     #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		//     #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"StartDate", type text}, {"EndDate", type text}, {"Status", type text}, {"Progress", type text}, {"Duration (in seconds)", type text}, {"Finished", type text}, {"RecordedDate", type text}, {"ResponseId", type text}, {"DistributionChannel", type text}, {"UserLanguage", type text}, {"Q1", type text}, {"Q2_1", type text}, {"Q2_2", type text}, {"Q2_3", type text}, {"Q2_4", type text}, {"Q3", type text}, {"Q4_1", type text}, {"Q4_2", type text}, {"Q4_3", type text}, {"Q4_4", type text}, {"Q4_5", type text}, {"Q4_6", type text}, {"Q4_7", type text}, {"Q4_8", type text}, {"Q5", type text}, {"Q6_1", type text}, {"Q6_2", type text}, {"Q6_3", type text}, {"Q6_4", type text}, {"Q6_5", type text}, {"Q6_6", type text}, {"Q6_7", type text}, {"Q6_8", type text}, {"Q7", type text}, {"Q8", type text}, {"Q9_1", type text}, {"Q9_2", type text}, {"Q9_3", type text}, {"Q9_4", type text}, {"Q9_5", type text}, {"Q9_6", type text}, {"Q9_7", type text}, {"Q10", type text}, {"Q11_1", type text}, {"Q11_2", type text}, {"Q11_3", type text}, {"Q11_4", type text}, {"Q11_5", type text}, {"Q11_6", type text}, {"Q11_7", type text}, {"Q11_8", type text}, {"Q12", type text}, {"Q13", type text}, {"Q14", type text}, {"Q15", type text}, {"Q16", type text}, {"Q17", type text}, {"Q19", type text}, {"Q20", type text}, {"courseId", type text}, {"courseName", type text}, {"courseCode", type text}, {"courseStartDate", type text}, {"courseEndDate", type text}, {"courseComponent", type text}, {"termType", type text}, {"termId", type text}, {"termName", type text}, {"termStartDate", type text}, {"termEndDate", type text}, {"studentProgramRegion", type text}, {"studentProgramState", type text}, {"studentProgramCampus", type text}, {"studentProgramId", type text}, {"studentProgram", type text}, {"gender", type text}, {"age", type text}, {"firstGen", type text}, {"IPEDSRaceEthnicity", type text}, {"courseDepartment", type text}, {"courseSectionRegion", type text}, {"courseSectionState", type text}, {"courseSectionCampus", type text}, {"modality", type text}, {"preVsPostLicensure", type text}, {"primaryFacultyRegion_1", type text}, {"primaryFacultyState_1", type text}, {"primaryFacultyCampus_1", type text}, {"facultyStatus_1", type text}, {"facultyLoad_1", type text}, {"dashboardReleaseDate", type text}, {"recordAddedModified", type text}, {"courseSectionTotalEnrolled", type text}, {"courseSectionInstructorCount_1", type text}, {"courseSectionTotalResponses", type text}, {"courseTotalEnrolled", type text}, {"courseInstructorCount_1", type text}, {"courseTotalResponses", type text}, {"delete", type text}, {"courseProgram", type text}, {"course_details", type text}, {"teacherId_1", type text}, {"teacherId_2", type text}, {"teacherId_3", type text}, {"teacherId_4", type text}, {"teacherId_5", type text}, {"teacherId_6", type text}, {"teacherId_7", type text}, {"teacherId_8", type text}, {"teacherId_9", type text}, {"teacherId_10", type text}, {"teacherId_11", type text}, {"teacherId_12", type text}, {"teacherId_13", type text}, {"teacherId_14", type text}, {"teacherId_15", type text}, {"teacherIdList", type text}, {"teacherFirstName_1", type text}, {"teacherFirstName_2", type text}, {"teacherFirstName_3", type text}, {"teacherFirstName_4", type text}, {"teacherFirstName_5", type text}, {"teacherFirstName_6", type text}, {"teacherFirstName_7", type text}, {"teacherFirstName_8", type text}, {"teacherFirstName_9", type text}, {"teacherFirstName_10", type text}, {"teacherFirstName_11", type text}, {"teacherFirstName_12", type text}, {"teacherFirstName_13", type text}, {"teacherFirstName_14", type text}, {"teacherFirstName_15", type text}, {"teacherLastName_1", type text}, {"teacherLastName_2", type text}, {"teacherLastName_3", type text}, {"teacherLastName_4", type text}, {"teacherLastName_5", type text}, {"teacherLastName_6", type text}, {"teacherLastName_7", type text}, {"teacherLastName_8", type text}, {"teacherLastName_9", type text}, {"teacherLastName_10", type text}, {"teacherLastName_11", type text}, {"teacherLastName_12", type text}, {"teacherLastName_13", type text}, {"teacherLastName_14", type text}, {"teacherLastName_15", type text}, {"teacherFullNameList", type text}, {"teacherEmail_1", type text}, {"teacherEmail_2", type text}, {"teacherEmail_3", type text}, {"teacherEmail_4", type text}, {"teacherEmail_5", type text}, {"teacherEmail_6", type text}, {"teacherEmail_7", type text}, {"teacherEmail_8", type text}, {"teacherEmail_9", type text}, {"teacherEmail_10", type text}, {"teacherEmail_11", type text}, {"teacherEmail_12", type text}, {"teacherEmail_13", type text}, {"teacherEmail_14", type text}, {"teacherEmail_15", type text}}),
		//     #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{"ResponseId", "Q8", "courseId", "termId", "studentProgramRegion","studentProgramCampus","studentProgramId","studentProgram","courseSectionTotalEnrolled"}),
		//     #"Filtered Rows" = Table.SelectRows(#"Removed Other Columns", each ([ResponseId] <> "Response ID" and [ResponseId] <> "{""ImportId"":""_recordId""}")),
		//     #"Changed Type1" = Table.TransformColumnTypes(#"Filtered Rows",{{"courseSectionTotalEnrolled", Int64.Type}})
		//     in
		//     #"Changed Type1"
	lineageTag: b91ffb55-960b-4b0a-a38f-c403a8aaac54
	queryGroup: Surveys

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression SV_6sVhwI30Q0vBfhQ =
		let
		    // Load raw Qualtrics responses
		    Source = GetQualtricsResponses("SV_6sVhwI30Q0vBfhQ"),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		
		    // Define the full list of desired column types
		    DesiredTypes = {
		        {"StartDate", type text}, {"EndDate", type text}, {"Status", type text}, {"Progress", type text},
		        {"Duration (in seconds)", type text}, {"Finished", type text}, {"RecordedDate", type text},
		        {"ResponseId", type text}, {"DistributionChannel", type text}, {"UserLanguage", type text},
		        {"Q2_1", type text}, {"Q2_2", type text}, {"Q2_3", type text}, {"Q2_4", type text}, {"Q3", type text},
		        {"Q4_1", type text}, {"Q4_2", type text}, {"Q4_3", type text}, {"Q4_4", type text}, {"Q4_5", type text},
		        {"Q4_6", type text}, {"Q4_7", type text}, {"Q4_8", type text}, {"Q5", type text},
		        {"Q6_1", type text}, {"Q6_2", type text}, {"Q6_3", type text}, {"Q6_4", type text},
		        {"Q6_5", type text}, {"Q6_6", type text}, {"Q6_7", type text}, {"Q6_8", type text},
		        {"Q7", type text}, {"Q8", type text}, {"Q9_1", type text}, {"Q9_2", type text}, {"Q9_3", type text},
		        {"Q9_4", type text}, {"Q9_5", type text}, {"Q9_6", type text}, {"Q9_7", type text}, {"Q10", type text},
		        {"Q11_1", type text}, {"Q11_2", type text}, {"Q11_3", type text}, {"Q11_4", type text},
		        {"Q11_5", type text}, {"Q11_6", type text}, {"Q11_7", type text}, {"Q11_8", type text},
		        {"Q12", type text}, {"Q13", type text}, {"Q14", type text}, {"Q15", type text}, {"Q16", type text},
		        {"Q17", type text}, {"Q19", type text}, {"Q20", type text}, {"courseId", type text}, {"courseName", type text},
		        {"courseCode", type text}, {"courseStartDate", type text}, {"courseEndDate", type text}, {"courseComponent", type text},
		        {"termType", type text}, {"termId", type text}, {"termName", type text}, {"termStartDate", type text},
		        {"termEndDate", type text}, {"studentProgramRegion", type text}, {"studentProgramState", type text},
		        {"studentProgramCampus", type text}, {"studentProgramId", type text}, {"studentProgram", type text},
		        {"gender", type text}, {"age", type text}, {"firstGen", type text}, {"IPEDSRaceEthnicity", type text},
		        {"courseDepartment", type text}, {"courseSectionRegion", type text}, {"courseSectionState", type text},
		        {"courseSectionCampus", type text}, {"modality", type text}, {"preVsPostLicensure", type text},
		        {"primaryFacultyRegion_1", type text}, {"primaryFacultyState_1", type text}, {"primaryFacultyCampus_1", type text},
		        {"facultyStatus_1", type text}, {"facultyLoad_1", type text}, {"dashboardReleaseDate", type text},
		        {"recordAddedModified", type text}, {"courseSectionTotalEnrolled", type text}, {"courseSectionInstructorCount_1", type text},
		        {"courseSectionTotalResponses", type text}, {"courseTotalEnrolled", type text}, {"courseInstructorCount_1", type text},
		        {"courseTotalResponses", type text}, {"delete", type text}, {"courseProgram", type text}, {"course_details", type text},
		        {"teacherId_1", type text}, {"teacherId_2", type text}, {"teacherId_3", type text}, {"teacherId_4", type text},
		        {"teacherId_5", type text}, {"teacherId_6", type text}, {"teacherId_7", type text}, {"teacherId_8", type text},
		        {"teacherId_9", type text}, {"teacherId_10", type text}, {"teacherId_11", type text}, {"teacherId_12", type text},
		        {"teacherId_13", type text}, {"teacherId_14", type text}, {"teacherId_15", type text}, {"teacherIdList", type text},
		        {"teacherFirstName_1", type text}, {"teacherFirstName_2", type text}, {"teacherFirstName_3", type text},
		        {"teacherFirstName_4", type text}, {"teacherFirstName_5", type text}, {"teacherFirstName_6", type text},
		        {"teacherFirstName_7", type text}, {"teacherFirstName_8", type text}, {"teacherFirstName_9", type text},
		        {"teacherFirstName_10", type text}, {"teacherFirstName_11", type text}, {"teacherFirstName_12", type text},
		        {"teacherFirstName_13", type text}, {"teacherFirstName_14", type text}, {"teacherFirstName_15", type text},
		        {"teacherLastName_1", type text}, {"teacherLastName_2", type text}, {"teacherLastName_3", type text},
		        {"teacherLastName_4", type text}, {"teacherLastName_5", type text}, {"teacherLastName_6", type text},
		        {"teacherLastName_7", type text}, {"teacherLastName_8", type text}, {"teacherLastName_9", type text},
		        {"teacherLastName_10", type text}, {"teacherLastName_11", type text}, {"teacherLastName_12", type text},
		        {"teacherLastName_13", type text}, {"teacherLastName_14", type text}, {"teacherLastName_15", type text},
		        {"teacherFullNameList", type text}, {"teacherEmail_1", type text}, {"teacherEmail_2", type text},
		        {"teacherEmail_3", type text}, {"teacherEmail_4", type text}, {"teacherEmail_5", type text},
		        {"teacherEmail_6", type text}, {"teacherEmail_7", type text}, {"teacherEmail_8", type text},
		        {"teacherEmail_9", type text}, {"teacherEmail_10", type text}, {"teacherEmail_11", type text},
		        {"teacherEmail_12", type text}, {"teacherEmail_13", type text}, {"teacherEmail_14", type text},
		        {"teacherEmail_15", type text}, {"teacherEmailList", type text}
		    },
		
		    // Filter DesiredTypes to only include columns that actually exist
		    AvailableColumns = Table.ColumnNames(#"Promoted Headers"),
		    ExistingTypePairs = List.Select(DesiredTypes, each List.Contains(AvailableColumns, _{0})),
		
		    // Apply type transformation only on columns that exist
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers", ExistingTypePairs),
		
		    // Keep only selected relevant columns for reporting
		    #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{
		        "ResponseId", "Q8", "courseId", "termId", "studentProgramRegion",
		        "studentProgramCampus", "studentProgramId", "studentProgram", "courseSectionTotalEnrolled"
		    }),
		
		    // Remove system rows
		    #"Filtered Rows" = Table.SelectRows(#"Removed Other Columns", each (
		        [ResponseId] <> "Response ID" and [ResponseId] <> "{""ImportId"":""_recordId""}"
		    )),
		
		    // Convert enrollment count to number
		    #"Changed Type1" = Table.TransformColumnTypes(#"Filtered Rows",{{"courseSectionTotalEnrolled", Int64.Type}})
		in
		    #"Changed Type1"
	lineageTag: 0f6143f9-fb02-4354-8ea7-c9a91d38dc80
	queryGroup: Surveys

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression SV_2htorCxBvOSbRzg =
		let
		    Source = GetQualtricsResponses("SV_2htorCxBvOSbRzg"),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"StartDate", type text}, {"EndDate", type text}, {"Status", type text}, {"Progress", type text}, {"Duration (in seconds)", type text}, {"Finished", type text}, {"RecordedDate", type text}, {"ResponseId", type text}, {"DistributionChannel", type text}, {"UserLanguage", type text}, {"Q1_1", type text}, {"Q1_2", type text}, {"Q1_3", type text}, {"Q1_4", type text}, {"Q1_5", type text}, {"Q1_6", type text}, {"Q1_7", type text}, {"Q1_8", type text}, {"Q1_9", type text}, {"Q1_10", type text}, {"Q1_11", type text}, {"Q2", type text}, {"Q94", type text}, {"Q3", type text}, {"Q4", type text}, {"Q5", type text}, {"Q6", type text}, {"Q7_1", type text}, {"Q7_2", type text}, {"Q7_3", type text}, {"Q7_4", type text}, {"Q7_5", type text}, {"Q7_6", type text}, {"Q7_7", type text}, {"Q7_7_TEXT", type text}, {"Q8", type text}, {"Q9", type text}, {"Q10", type text}, {"Q11", type text}, {"Q12", type text}, {"Q13", type text}, {"Q14", type text}, {"Q15", type text}, {"Q16", type text}, {"Q17", type text}, {"courseId", type text}, {"courseName", type text}, {"courseCode", type text}, {"courseStartDate", type text}, {"courseEndDate", type text}, {"courseComponent", type text}, {"termType", type text}, {"termId", type text}, {"termName", type text}, {"termStartDate", type text}, {"termEndDate", type text}, {"studentProgramRegion", type text}, {"studentProgramState", type text}, {"studentProgramCampus", type text}, {"studentProgramId", type text}, {"studentProgram", type text}, {"gender", type text}, {"age", type text}, {"firstGen", type text}, {"IPEDSRaceEthnicity", type text}, {"courseDepartment", type text}, {"courseSectionRegion", type text}, {"courseSectionState", type text}, {"courseSectionCampus", type text}, {"modality", type text}, {"preVsPostLicensure", type text}, {"primaryFacultyRegion_1", type text}, {"primaryFacultyState_1", type text}, {"primaryFacultyCampus_1", type text}, {"facultyStatus_1", type text}, {"facultyLoad_1", type text}, {"dashboardReleaseDate", type text}, {"recordAddedModified", type text}, {"courseSectionTotalEnrolled", type text}, {"courseSectionInstructorCount_1", type text}, {"courseSectionTotalResponses", type text}, {"courseTotalEnrolled", type text}, {"courseInstructorCount_1", type text}, {"courseTotalResponses", type text}, {"delete", type text}, {"courseProgram", type text}, {"course_details", type text}, {"teacherId_1", type text}, {"teacherId_2", type text}, {"teacherId_3", type text}, {"teacherId_4", type text}, {"teacherId_5", type text}, {"teacherId_6", type text}, {"teacherId_7", type text}, {"teacherId_8", type text}, {"teacherId_9", type text}, {"teacherId_10", type text}, {"teacherId_11", type text}, {"teacherId_12", type text}, {"teacherId_13", type text}, {"teacherId_14", type text}, {"teacherId_15", type text}, {"teacherIdList", type text}, {"teacherFirstName_1", type text}, {"teacherFirstName_2", type text}, {"teacherFirstName_3", type text}, {"teacherFirstName_4", type text}, {"teacherFirstName_5", type text}, {"teacherFirstName_6", type text}, {"teacherFirstName_7", type text}, {"teacherFirstName_8", type text}, {"teacherFirstName_9", type text}, {"teacherFirstName_10", type text}, {"teacherFirstName_11", type text}, {"teacherFirstName_12", type text}, {"teacherFirstName_13", type text}, {"teacherFirstName_14", type text}, {"teacherFirstName_15", type text}, {"teacherLastName_1", type text}, {"teacherLastName_2", type text}, {"teacherLastName_3", type text}, {"teacherLastName_4", type text}, {"teacherLastName_5", type text}, {"teacherLastName_6", type text}, {"teacherLastName_7", type text}, {"teacherLastName_8", type text}, {"teacherLastName_9", type text}, {"teacherLastName_10", type text}, {"teacherLastName_11", type text}, {"teacherLastName_12", type text}, {"teacherLastName_13", type text}, {"teacherLastName_14", type text}, {"teacherLastName_15", type text}, {"teacherFullNameList", type text}, {"teacherEmail_1", type text}, {"teacherEmail_2", type text}, {"teacherEmail_3", type text}, {"teacherEmail_4", type text}, {"teacherEmail_5", type text}, {"teacherEmail_6", type text}, {"teacherEmail_7", type text}, {"teacherEmail_8", type text}, {"teacherEmail_9", type text}, {"teacherEmail_10", type text}, {"teacherEmail_11", type text}, {"teacherEmail_12", type text}, {"teacherEmail_13", type text}, {"teacherEmail_14", type text}, {"teacherEmail_15", type text}, {"teacherEmailList", type text}, {"", type text}, {"_1", type text}, {"_2", type text}, {"_3", type text}, {"_4", type text}, {"_5", type text}, {"_6", type text}, {"_7", type text}, {"_8", type text}, {"_9", type text}, {"_10", type text}, {"_11", type text}, {"_12", type text}}),
		    #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{"ResponseId", "Q6", "courseId", "termId", "studentProgramRegion","studentProgramCampus","studentProgramId","studentProgram","courseSectionTotalEnrolled"}),
		    #"Filtered Rows" = Table.SelectRows(#"Removed Other Columns", each ([ResponseId] <> "Response ID" and [ResponseId] <> "{""ImportId"":""_recordId""}")),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Filtered Rows",{{"courseSectionTotalEnrolled", Int64.Type}}),
		    #"Renamed Columns" = Table.RenameColumns(#"Changed Type1",{{"Q6", "Q8"}})
		in
		    #"Renamed Columns"
	lineageTag: 12d6140a-4069-4c34-92cc-b0352623b155
	queryGroup: Surveys

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Exception

expression SV_3lUdV2KMxHv7y98 =
		let
		    Source = GetQualtricsResponses("SV_3lUdV2KMxHv7y98"),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"StartDate", type text}, {"EndDate", type text}, {"Status", type text}, {"Progress", type text}, {"Duration (in seconds)", type text}, {"Finished", type text}, {"RecordedDate", type text}, {"ResponseId", type text}, {"DistributionChannel", type text}, {"UserLanguage", type text}, {"Q1_1", type text}, {"Q1_2", type text}, {"Q1_3", type text}, {"Q1_4", type text}, {"Q1_5", type text}, {"Q1_6", type text}, {"Q1_7", type text}, {"Q1_8", type text}, {"Q1_9", type text}, {"Q1_10", type text}, {"Q1_11", type text}, {"Q2", type text}, {"Q3", type text}, {"Q4", type text}, {"Q5", type text}, {"Q6", type text}, {"Q7_1", type text}, {"Q7_2", type text}, {"Q7_3", type text}, {"Q7_4", type text}, {"Q7_5", type text}, {"Q7_6", type text}, {"Q7_7", type text}, {"Q7_7_TEXT", type text}, {"Q8", type text}, {"Q9", type text}, {"Q10", type text}, {"Q11", type text}, {"Q12", type text}, {"Q13", type text}, {"Q14", type text}, {"Q15", type text}, {"Q15_6_TEXT", type text}, {"Q16", type text}, {"courseId", type text}, {"courseName", type text}, {"courseCode", type text}, {"courseStartDate", type text}, {"courseEndDate", type text}, {"courseComponent", type text}, {"termType", type text}, {"termId", type text}, {"termName", type text}, {"termStartDate", type text}, {"termEndDate", type text}, {"studentProgramRegion", type text}, {"studentProgramState", type text}, {"studentProgramCampus", type text}, {"studentProgramId", type text}, {"studentProgram", type text}, {"gender", type text}, {"age", type text}, {"firstGen", type text}, {"IPEDSRaceEthnicity", type text}, {"courseDepartment", type text}, {"courseSectionRegion", type text}, {"courseSectionState", type text}, {"courseSectionCampus", type text}, {"modality", type text}, {"preVsPostLicensure", type text}, {"primaryFacultyRegion_1", type text}, {"primaryFacultyState_1", type text}, {"primaryFacultyCampus_1", type text}, {"facultyStatus_1", type text}, {"facultyLoad_1", type text}, {"dashboardReleaseDate", type text}, {"recordAddedModified", type text}, {"courseSectionTotalEnrolled", type text}, {"courseSectionInstructorCount_1", type text}, {"courseSectionTotalResponses", type text}, {"courseTotalEnrolled", type text}, {"courseInstructorCount_1", type text}, {"courseTotalResponses", type text}, {"delete", type text}, {"courseProgram", type text}, {"course_details", type text}, {"teacherId_1", type text}, {"teacherId_2", type text}, {"teacherId_3", type text}, {"teacherId_4", type text}, {"teacherId_5", type text}, {"teacherId_6", type text}, {"teacherId_7", type text}, {"teacherId_8", type text}, {"teacherId_9", type text}, {"teacherId_10", type text}, {"teacherId_11", type text}, {"teacherId_12", type text}, {"teacherId_13", type text}, {"teacherId_14", type text}, {"teacherId_15", type text}, {"teacherIdList", type text}, {"teacherFirstName_1", type text}, {"teacherFirstName_2", type text}, {"teacherFirstName_3", type text}, {"teacherFirstName_4", type text}, {"teacherFirstName_5", type text}, {"teacherFirstName_6", type text}, {"teacherFirstName_7", type text}, {"teacherFirstName_8", type text}, {"teacherFirstName_9", type text}, {"teacherFirstName_10", type text}, {"teacherFirstName_11", type text}, {"teacherFirstName_12", type text}, {"teacherFirstName_13", type text}, {"teacherFirstName_14", type text}, {"teacherFirstName_15", type text}, {"teacherLastName_1", type text}, {"teacherLastName_2", type text}, {"teacherLastName_3", type text}, {"teacherLastName_4", type text}, {"teacherLastName_5", type text}, {"teacherLastName_6", type text}, {"teacherLastName_7", type text}, {"teacherLastName_8", type text}, {"teacherLastName_9", type text}, {"teacherLastName_10", type text}, {"teacherLastName_11", type text}, {"teacherLastName_12", type text}, {"teacherLastName_13", type text}, {"teacherLastName_14", type text}, {"teacherLastName_15", type text}, {"teacherFullNameList", type text}, {"teacherEmail_1", type text}, {"teacherEmail_2", type text}, {"teacherEmail_3", type text}, {"teacherEmail_4", type text}, {"teacherEmail_5", type text}, {"teacherEmail_6", type text}, {"teacherEmail_7", type text}, {"teacherEmail_8", type text}, {"teacherEmail_9", type text}, {"teacherEmail_10", type text}, {"teacherEmail_11", type text}, {"teacherEmail_12", type text}, {"teacherEmail_13", type text}, {"teacherEmail_14", type text}, {"teacherEmail_15", type text}, {"teacherEmailList", type text}, {"", type text}, {"_1", type text}, {"_2", type text}, {"_3", type text}, {"_4", type text}, {"_5", type text}, {"_6", type text}, {"_7", type text}, {"_8", type text}, {"_9", type text}, {"_10", type text}, {"_11", type text}, {"_12", type text}, {"_13", type text}}),
		    #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{"ResponseId", "Q6", "courseId", "termId", "studentProgramRegion","studentProgramCampus","studentProgramId","studentProgram","courseSectionTotalEnrolled"}),
		    #"Filtered Rows" = Table.SelectRows(#"Removed Other Columns", each ([ResponseId] <> "Response ID" and [ResponseId] <> "{""ImportId"":""_recordId""}")),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Filtered Rows",{{"courseSectionTotalEnrolled", Int64.Type}}),
		    #"Renamed Columns" = Table.RenameColumns(#"Changed Type1",{{"Q6", "Q8"}})
		in
		    #"Renamed Columns"
	lineageTag: 6cc4648e-2222-4a10-a284-ca41babdd122
	queryGroup: Surveys

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Operations - HR All' =
		let
		    Source = MySQL.Database("LinuxDB01", "account_admin", [ReturnSingleDatabase=true, Query="select #(lf)* from account_admin.hr_raws#(lf)where active = 1#(lf)"])
		in
		    Source
	lineageTag: 50c19dd3-4e88-42b1-b69d-0ace94f2e5c5
	queryGroup: Faculty

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression '<2024 Class Sections' =
		let
		    Source = Sql.Database("rpt2-prod.ec.galencollege.edu", "coll18_repl_production", [Query="SELECT COURSE_SECTIONS.COURSE_SECTIONS_ID, SEC_SHORT_TITLE,SEC_LOCATION,SEC_TERM, SEC_FACULTY_INFO,SEC_STATUS, TERMS.TERM_DESC#(lf)FROM COURSE_SECTIONS #(lf)INNER JOIN SEC_STATUSES on COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID and SEC_STATUSES.POS=1#(lf)JOIN TERMS ON TERMS.TERMS_ID = SEC_TERM AND TERM_REPORTING_YEAR IN (2021,2022,2023#(lf))"]),
		    #"Filtered Rows" = Table.SelectRows(Source, each [COURSE_SECTIONS_ID] <> null and [COURSE_SECTIONS_ID] <> "")
		in
		    #"Filtered Rows"
	lineageTag: ddb10b01-475f-4aef-bcee-dce2818fa811
	queryGroup: Surveys

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression GetQualtricsSurveyDataLabeled = ```
		let
		    GetQualtricsSurveyDataLabeled = (surveyId as text, useLabels as logical) as table =>
		    let
		        // API credentials and base URL
		        ApiToken = "mByD2TYGnXi21t6Tt7m8kcqCTnls4aA2GE26SOzj",
		        BaseUrl = "https://iad1.qualtrics.com",
		
		        // JSON request body with useLabels toggle
		        StartExportBody = 
		            "{""format"":""csv"",""breakoutSets"":true,""compress"":false,""useLabels"":" 
		            & Text.Lower(Text.From(useLabels)) 
		            & ",""exportResponsesInProgress"":false}",
		
		        // API request headers
		        StartExportHeaders = [
		            #"Content-Type" = "application/json",
		            #"X-API-TOKEN" = ApiToken
		        ],
		
		        // Trigger export
		        StartExportResponse = Web.Contents(BaseUrl, [
		            RelativePath = "/API/v3/surveys/" & surveyId & "/export-responses",
		            Headers = StartExportHeaders,
		            Content = Text.ToBinary(StartExportBody),
		            IsRetry = true
		        ]),
		        StartExportResult = Json.Document(StartExportResponse),
		        ProgressId = StartExportResult[result][progressId],
		
		        // Wait for export to complete
		        CheckStatusRecursively = (ProgressId as text) as text =>
		            let
		                response = Web.Contents(BaseUrl, [
		                    RelativePath = "/API/v3/surveys/" & surveyId & "/export-responses/" & ProgressId,
		                    Headers = StartExportHeaders,
		                    IsRetry = true
		                ]),
		                jsonResponse = Json.Document(response),
		                status = jsonResponse[result][status]
		            in
		                if status = "complete" then
		                    jsonResponse[result][fileId]
		                else if status = "inProgress" then
		                    Function.InvokeAfter(() => @CheckStatusRecursively(ProgressId), #duration(0, 0, 0, 2))
		                else
		                    error "Export failed or invalid status: " & status,
		
		        result = Function.InvokeAfter(() => @CheckStatusRecursively(ProgressId), #duration(0,0,0,2)),
		
		        // Download and parse CSV
		        DownloadFile = (fileId as text) =>
		            let
		                FileResponse = Web.Contents(BaseUrl, [
		                    RelativePath = "/API/v3/surveys/" & surveyId & "/export-responses/" & fileId & "/file",
		                    Headers = [
		                        #"X-API-TOKEN" = ApiToken,
		                        #"Accept-Encoding" = "gzip, deflate"
		                    ]
		                ]),
		                ImportedCSV = Csv.Document(FileResponse, [
		                    Delimiter = ",",
		                    Encoding = 1252,
		                    QuoteStyle = QuoteStyle.Csv
		                ])
		            in
		                ImportedCSV,
		
		        ExportStatus = DownloadFile(result)
		
		    in
		        ExportStatus
		in
		    GetQualtricsSurveyDataLabeled
		```
	lineageTag: 174f3c3e-1c84-479a-a30b-30ffc532bb19

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

