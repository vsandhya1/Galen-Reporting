table 'Cohorts & Graduates'
	lineageTag: 10e19dfa-96e1-49bc-bf19-21dbc5020634

	measure CurrentTerm = ```
			
			VAR FINAL = CALCULATE(
			    COUNT('Cohorts & Graduates'[STUDENT_ID]), 
			    DIM_Terms[TermDuringBreak] = "True")
			
			RETURN 
			IF(FINAL = BLANK(), 0, FINAL)
			
			```
		formatString: #,0
		lineageTag: 15247a36-bf31-4dbb-8152-66062acefba6

	measure PreviousYearValue = ```
			
			VAR FINAL = CALCULATE(
			    COUNT('Cohorts & Graduates'[STUDENT_ID]), 
			    DIM_Terms[TermDuringBreak_LastYear] = "True")
			
			RETURN 
			IF(FINAL = BLANK(), 0, FINAL)
			```
		formatString: #,0
		lineageTag: 6ac94542-a33e-4926-a6cb-c09d2ee41027

	measure 'Current - last_year' =
			
			//var CurrentYear = CALCULATE([CurrentTerm],ALL('Cohorts & Graduates'))
			var CUR_PRE = [CurrentTerm]-[PreviousYearValue]
			var final = DIVIDE(CUR_PRE,[CurrentTerm],0)
			return
			IF([CurrentTerm]>[PreviousYearValue], + + final,-  final)
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 451ff7f3-6f30-484b-b5da-3a765327af5d

	measure Flag =
			IF([CurrentTerm]>[PreviousYearValue], UNICHAR(9650), UNICHAR(9660))
			
			// "üî∫","üîª")
		lineageTag: 2e3aa1b0-9aae-46fe-8190-e22cfecc1a18

	measure CurrentTerm_Concatenated = ```
			
			COALESCE(
			    CONCATENATEX(
			        FILTER(Dim_Terms, DIM_Terms[TermDuringBreak] = "True"),
			        Dim_Terms[TERMS_ID],
			        ", "
			    ),
			    "0"
			)
			
			```
		lineageTag: 8b85f862-9a5f-42d0-aa0e-89011da9b052

	measure 'Current - last_year1' = ```
			
			VAR CUR_PRE = [CurrentTerm] - [PreviousYearValue]
			VAR final = DIVIDE(CUR_PRE, [PreviousYearValue],0)
			RETURN
			    IF(
			        [CurrentTerm] > [PreviousYearValue],             
			        CONCATENATE("+", FORMAT(final, "0.00%")),      
			        CONCATENATE("-", FORMAT(ABS(final), "0.00%"))   
			    )
			
			```
		lineageTag: 8b2e8e23-bce0-456b-8dee-bded93c3ec50

	measure FutureTerm_Concatenated = ```
			
			    CONCATENATEX(
			        FILTER(
			            Dim_Terms,
			            DIM_Terms[IsNextTerm] = True()
			        ),
			        Dim_Terms[TERMS_ID],
			        ", "
			    )
			
			```
		lineageTag: a96820ef-d0ec-454f-9b12-a8b68427cc49

	measure New_Starts_LY_Code = IF([CurrentTerm]>[PreviousYearValue], "#00B050","#C81515")
		lineageTag: 2fca66d3-a291-422c-afd9-4c5875d7f59a

	measure New_Starts_Current_Term_Budget_Code = IF([CurrentTerm] > [Current_Term_Budget], "#00B050","#C81515")
		lineageTag: 7045df8b-495d-4c0b-8b73-06bea29d9ac4

	column STUDENT_ID
		dataType: string
		lineageTag: 13768248-86d6-4b71-ba6f-a9c86c61bda8
		summarizeBy: none
		sourceColumn: STUDENT_ID

		annotation SummarizationSetBy = Automatic

	column PROGRAM_ID
		dataType: string
		lineageTag: 919ed49c-d1b9-45ea-bbe8-781cff8eb94c
		summarizeBy: none
		sourceColumn: PROGRAM_ID

		annotation SummarizationSetBy = Automatic

	column COHORT_TERM_FIXED
		dataType: string
		lineageTag: 8e293a9d-3abd-402f-bf4d-ddea2f06f486
		summarizeBy: none
		sourceColumn: COHORT_TERM_FIXED

		annotation SummarizationSetBy = Automatic

	column LAST_COHORT_FIXED
		dataType: string
		lineageTag: ca5e80f9-495d-4abf-9c6c-00793567d317
		summarizeBy: none
		sourceColumn: LAST_COHORT_FIXED

		annotation SummarizationSetBy = Automatic

	column ENROLL_TERM_FIXED
		dataType: string
		lineageTag: f9eef3f7-4d48-478d-9825-63ed797ecdb3
		summarizeBy: none
		sourceColumn: ENROLL_TERM_FIXED

		annotation SummarizationSetBy = Automatic

	column TERM_START_DATE
		dataType: dateTime
		formatString: General Date
		lineageTag: 0a68bb3a-8cf5-41f9-85d0-07935149100f
		summarizeBy: none
		sourceColumn: TERM_START_DATE

		variation Variation
			isDefault
			relationship: 2b9114c8-d6c9-4c43-9839-61d785b22050
			defaultHierarchy: LocalDateTable_296474d4-aa9f-4c49-9166-2c8e53b4cee6.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column TERM_END_DATE
		dataType: dateTime
		formatString: General Date
		lineageTag: 2a7bfa60-54bf-4a5c-b6ae-4fe4ab42c7cf
		summarizeBy: none
		sourceColumn: TERM_END_DATE

		variation Variation
			isDefault
			relationship: 6c62a0b2-9341-4331-a34d-9741842946ad
			defaultHierarchy: LocalDateTable_5f33d2a9-75dd-4cc4-863c-a5978a2a145c.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column GRAD_STATUS
		dataType: string
		lineageTag: 0069328e-393b-4c8c-a775-81756c4e2819
		summarizeBy: none
		sourceColumn: GRAD_STATUS

		annotation SummarizationSetBy = Automatic

	column WITHDRAW_STATUS
		dataType: string
		lineageTag: f46177fe-a013-4c1c-893e-f5dd23869d22
		summarizeBy: none
		sourceColumn: WITHDRAW_STATUS

		annotation SummarizationSetBy = Automatic

	column ACTIVE
		dataType: int64
		formatString: 0
		lineageTag: 46a55c7f-c437-4cb5-bc74-2103fe108ee3
		summarizeBy: sum
		sourceColumn: ACTIVE

		annotation SummarizationSetBy = Automatic

	column GRADUATE
		dataType: int64
		formatString: 0
		lineageTag: d0d0afaf-fd04-4441-96a6-97dddaa88970
		summarizeBy: sum
		sourceColumn: GRADUATE

		annotation SummarizationSetBy = Automatic

	column WITHDREW
		dataType: int64
		formatString: 0
		lineageTag: 9bad559c-7084-4b9f-9c3a-d1b3f9dbd5ec
		summarizeBy: sum
		sourceColumn: WITHDREW

		annotation SummarizationSetBy = Automatic

	column TRANSFER_STUDENT
		dataType: int64
		formatString: 0
		lineageTag: e97f658e-bc2f-48ac-902a-a5f6846f4bc8
		summarizeBy: sum
		sourceColumn: TRANSFER_STUDENT

		annotation SummarizationSetBy = Automatic

	column TRANSFER_PROGRAM
		dataType: string
		lineageTag: 91e3e7ed-d19b-45d7-9c0d-5dfe3e7cbe23
		summarizeBy: none
		sourceColumn: TRANSFER_PROGRAM

		annotation SummarizationSetBy = Automatic

	column TRANSFER_FIRST_COHORT_TERM
		dataType: string
		lineageTag: 5d252d1a-66b7-44df-b399-01b394fe0bd4
		summarizeBy: none
		sourceColumn: TRANSFER_FIRST_COHORT_TERM

		annotation SummarizationSetBy = Automatic

	column COHORT_TERM_RANK
		dataType: string
		lineageTag: fe9928a8-0cca-4779-8798-d31a1680f810
		summarizeBy: none
		sourceColumn: COHORT_TERM_RANK

		annotation SummarizationSetBy = Automatic

	column TRANSFER_LAST_COHORT_TERM
		dataType: string
		lineageTag: 01744929-1f96-450b-bf13-8a8496f25cc8
		summarizeBy: none
		sourceColumn: TRANSFER_LAST_COHORT_TERM

		annotation SummarizationSetBy = Automatic

	column NUM_TERMS
		dataType: int64
		formatString: 0
		lineageTag: 1aa99784-5b0d-43cf-bfad-c4ab3825b91e
		summarizeBy: sum
		sourceColumn: NUM_TERMS

		annotation SummarizationSetBy = Automatic

	column NUM_MONTHS
		dataType: int64
		formatString: 0
		lineageTag: bda7cf44-242c-41b9-ab40-84a991d92e7f
		summarizeBy: sum
		sourceColumn: NUM_MONTHS

		annotation SummarizationSetBy = Automatic

	column PCT100
		dataType: int64
		formatString: 0
		lineageTag: a12f451c-8f23-46b7-9ce2-7ab09010c49a
		summarizeBy: sum
		sourceColumn: PCT100

		annotation SummarizationSetBy = Automatic

	column PCT150
		dataType: int64
		formatString: 0
		lineageTag: f158ff5b-f22b-487e-bcd8-1037f532dc48
		summarizeBy: sum
		sourceColumn: PCT150

		annotation SummarizationSetBy = Automatic

	column ROW_CNTR
		dataType: int64
		formatString: 0
		lineageTag: 87ac352a-7f84-48d9-ba29-8a438aa17f78
		summarizeBy: sum
		sourceColumn: ROW_CNTR

		annotation SummarizationSetBy = Automatic

	column TERM_CNTR
		dataType: int64
		formatString: 0
		lineageTag: 7c2a1e60-fd16-4b6b-803f-7c8b56281546
		summarizeBy: sum
		sourceColumn: TERM_CNTR

		annotation SummarizationSetBy = Automatic

	column COMPRATE_FLAG
		dataType: int64
		formatString: 0
		lineageTag: 08355732-5c90-4d47-a0fd-b56710304ff9
		summarizeBy: sum
		sourceColumn: COMPRATE_FLAG

		annotation SummarizationSetBy = Automatic

	column CHANGED_LOCATIONS
		dataType: int64
		formatString: 0
		lineageTag: 307525a3-05e7-4790-a3a4-05df99d9914b
		summarizeBy: sum
		sourceColumn: CHANGED_LOCATIONS

		annotation SummarizationSetBy = Automatic

	column CALC_LOCATION
		dataType: string
		lineageTag: 58030745-12db-4ae0-b009-abebd03c937b
		summarizeBy: none
		sourceColumn: CALC_LOCATION

		annotation SummarizationSetBy = Automatic

	column STPR_LOCATION
		dataType: string
		lineageTag: 65ec0117-7600-4dab-9509-23d7f85f9dcd
		summarizeBy: none
		sourceColumn: STPR_LOCATION

		annotation SummarizationSetBy = Automatic

	column STH_REASON
		dataType: string
		lineageTag: b2d8c94d-d15c-4a53-8c9c-59e53220332b
		summarizeBy: none
		sourceColumn: STH_REASON

		annotation SummarizationSetBy = Automatic

	column WITHDRAW_DESC
		dataType: string
		lineageTag: 480995fe-297a-4fd0-a076-23065f6a3319
		summarizeBy: none
		sourceColumn: WITHDRAW_DESC

		annotation SummarizationSetBy = Automatic

	partition 'Cohorts & Graduates' = m
		mode: import
		queryGroup: 'New Starts'
		source =
				let
				    Source = Sql.Database("rpt2-prod.ec.galencollege.edu", "coll18_repl_production", [Query="--Query to be used for BOTH New Starts and YoY New Starts:#(lf)#(lf)--/*#(lf)--Here are a few notes from a 3/1/2024 email from K. Moore:#(lf)#(lf)--1) Jonda and Dr. Hyndman decided to only use students from 2020 and forward to avoid issues with converted data coming from CampusVUE#(lf)--2) Because all PN/VN and MSN students only take nursing courses, let‚Äôs exclude them from this data set, since we have already calculated the completion rate through your work on the Completion Rate from First Nursing Course.#(lf)--3) The logic of the WDPRO is working but we notice there are some ‚ÄúWs‚Äù in column ‚ÄúI‚Äù, we should remove them.#(lf)--4) Once you produce another iteration of this data set, we will test it again and if everything looks good, we will need this data aggregated to be able to identify the cohort number and % of completion. Graduates of a program should be for the most recent campus with the original start date.#(lf)--*/#(lf)#(lf)/*  create a table of program terms (used later to determine how long a student took to graduate)*/#(lf)IF OBJECT_ID('tempdb..#PROGRAM_TERMS') IS NOT NULL#(lf)    DROP TABLE #PROGRAM_TERMS#(lf)#(lf)CREATE TABLE #PROGRAM_TERMS#(lf)(#(lf)PT_PROGRAMS_ID       VARCHAR(33),#(lf)NUMBER_OF_TERMS      INT,#(lf)PT_TERM_TYPE CHAR(1),#(lf)ONTIME               INT,#(lf)PCT100               INT,#(lf)PCT150               INT,#(lf)PCTGT150             INT,#(lf)SEMESTER_MONTHS INT#(lf));#(lf)#(lf)#(lf)INSERT INTO #PROGRAM_TERMS#(lf)(PT_PROGRAMS_ID,     NUMBER_OF_TERMS,  PT_TERM_TYPE, ONTIME, PCT100,  PCT150,  PCTGT150, SEMESTER_MONTHS)#(lf)VALUES#(lf)('ADN.2YR.AAS', '8', 'Q', '6', '8',   '12', '13', NULL),#(lf)('ADN.2YR.AAS.2', '8', 'Q', '6', '8',   '12', '13', NULL),#(lf)('ADN.2YR.AAS.CO', '8', 'Q', '6', '8',   '12', '13', NULL),--#(lf)('ADN.2YR.AS', '8', 'Q', '6', '8',   '12', '13', NULL),#(lf)('ADN.2YR.AS.NV', '8', 'Q', '6', '8',   '12', '13', NULL),--#(lf)('ADN.ADV.AAS', '6', 'Q', '4', '6',   '9', '10', NULL),#(lf)('ADN.ADV.AS', '6', 'Q', '4', '6',   '9', '10', NULL),--#(lf)('ADN.BRDG.AAS', '6', 'Q', '4', '6',   '9', '10', NULL),#(lf)('ADN.BRDG.AS', '6', 'Q', '4', '6',   '9', '10', NULL),#(lf)('ADN.BRDG.VA.AS', '6', 'Q', '4', '6',   '9', '10', NULL),#(lf)('ADN-BRDG-AAS', '6', 'Q', '4', '6',   '9', '10', NULL),#(lf)('BSN.PRE.BSN', '12', 'Q', '8', '12',  '18', '19', NULL),#(lf)('BSN.PRE.BSN.CO', '12', 'Q', '8', '12',  '18', '19', NULL),--#(lf)('BSN.PRE.BSN.NV', '12', 'Q', '8', '12',  '18', '19', NULL),#(lf)('LPN.EVE.FL', '7', 'Q', '7', '7',   '10', '11', NULL),#(lf)('PN.DAY.DPN', '4', 'Q', '4', '4',   '6', '7', NULL),#(lf)('PN.DAY.DPN.FL', '4', 'Q', '4', '4',   '6', '7', NULL),#(lf)('PN.DAY.DPN.KY', '4', 'Q', '4', '4',   '6', '7', NULL),#(lf)('PN.EVE.DPN',          '7', 'Q', '7', '7',   '10', '11', NULL),#(lf)('VN.DAY.DVN',          '4', 'Q', '4', '4',   '6', '7', NULL),#(lf)('VN.EVE.DVN',          '7', 'Q', '7', '7',   '10', '11', NULL),#(lf)('BSN.RN.BSN',          '4', 'S', '8', '8',   '12', '13', '10'),#(lf)('MSN.NE.MSN',          '6', 'S', '6', '6',   '9', '10', '14'),#(lf)('MSN.NHL.MSN',         '6', 'S', '6', '6',   '9', '10', '14'),#(lf)('NE.PMC',              '4', 'S', '8', '8',   '12', '13', '10'),#(lf)('DNP.EL.MSN.DNP',      '6', 'S', '6', '6',   '9', '10', '14'),--#(lf)('DNP.AL.MSN.DNP',      '6', 'S', '6', '6',   '9', '10', '14');--#(lf)#(lf)create nonclustered index PT_IDX on #PROGRAM_TERMS (PT_PROGRAMS_ID);#(lf)#(lf)/*  create the term calender.  this is the complete listing of TERMS 4 per year for quarterly student 6 per year for semester students*/#(lf)IF OBJECT_ID('tempdb..#TERMCAL') IS NOT NULL#(lf)    DROP TABLE #TERMCAL#(lf)#(lf)SELECT 'Q' AS TERMTYPE, TERMS_ID AS TC_TERM, TERM_START_DATE AS TC_START_DT, TERM_END_DATE AS TC_END_DT, ROW_NUMBER() OVER(ORDER BY TERM_START_DATE ASC) AS POSITION#(lf)INTO #TERMCAL#(lf)FROM TERMS#(lf)WHERE TERM_REPORTING_YEAR >= 2020#(lf)AND RIGHT(TERMS_ID, 1) IN ('Q')#(lf)AND ISNUMERIC (LEFT(TERMS_ID, 4)) = 1#(lf)#(lf)UNION#(lf)#(lf)SELECT 'S' AS TERMTYPE, TERMS_ID AS TC_TERM, TERM_START_DATE AS TC_START_DT, TERM_END_DATE AS TC_END_DT, ROW_NUMBER() OVER(ORDER BY TERM_START_DATE ASC) AS POSITION#(lf)FROM TERMS#(lf)WHERE 1=1#(lf)and TERMS_ID NOT IN ('2019SM2', '2019FL1','2019FL2','2020SPS', '201904C','2021BF', '2020SUS', '2020FAS', '2020SM2')#(lf)AND TERM_REPORTING_YEAR >= 2020#(lf)AND RIGHT(TERMS_ID, 1) not IN ('Q','C')#(lf)AND ISNUMERIC (LEFT(TERMS_ID, 4)) = 1;#(lf)create nonclustered index TC_IDX on #TERMCAL (TC_TERM);#(lf)#(lf)#(lf)#(lf)/*  this is a list of all student that attened galen classes;  used to remove students that may have enrolled but never attened*/#(lf)IF OBJECT_ID('tempdb..#DID_ATTEND') IS NOT NULL  DROP TABLE #DID_ATTEND;#(lf)#(lf)SELECT DISTINCT STUDENT_ID AS ENROLLED_STUDENT_ID#(lf)INTO #DID_ATTEND#(lf)FROM  STUDENT_ENROLLMENT_DETAIL_VIEW with (nolock)#(lf)WHERE 1=1#(lf)AND STUDENT_ENROLLMENT_DETAIL_VIEW.ENROLL_START_DATE >= '1/1/2020'#(lf)AND (ENROLL_CURRENT_STATUS in ('Withdrawn','Add','New')#(lf)or  #(lf)(ENROLL_CURRENT_STATUS = 'Dropped' and  ENROLL_CURRENT_STATUS_REASON in ('Viol of Code of Conduct','Program of Dir Discretion','Attendance Violation'))#(lf))#(lf);#(lf)create nonclustered index DID_ATTEND_IDX on #DID_ATTEND (ENROLLED_STUDENT_ID);#(lf)#(lf)#(lf)/* create a table of students who had some student program entry that was after 2020;  not interested in any legecy data that is before#(lf)   2020 (FORMERLY2018) only; actions before 1/1/2018 create bogus entries#(lf)   #(lf)   as of March 11, 2024; decision was made to limit to 2020 and forward.  #(lf)*/#(lf)#(lf)IF OBJECT_ID('tempdb..#SPID_ACTION_AFTER_TARGET_DT') IS NOT NULL#(lf)    DROP TABLE  #SPID_ACTION_AFTER_TARGET_DT;#(lf)#(lf)SELECT SD.STUDENT_PROGRAMS_ID as SPID_ACTION, MIN(STPR_START_DATE) AS LASTACTION_STDT, MAX(ISNULL(SD.STPR_END_DATE, '12/31/3000')) AS LASTACTION_ENDDT#(lf)INTO #SPID_ACTION_AFTER_TARGET_DT#(lf)FROM STPR_DATES SD#(lf)JOIN STUDENT_PROGRAMS SP ON SP.STUDENT_PROGRAMS_ID = SD.STUDENT_PROGRAMS_ID#(lf)JOIN STPR_STATUSES SS ON SS.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID AND SS.POS = 1#(lf)WHERE SD.STPR_START_DATE IS NOT NULL#(lf)AND   SD.STPR_START_DATE < ISNULL(SD.STPR_END_DATE, '12/31/3000')#(lf)GROUP BY SD.STUDENT_PROGRAMS_ID#(lf)HAVING MIN(STPR_START_DATE) >= '1/1/2020';#(lf)#(lf)create nonclustered index SPIDACTION_IDX on #SPID_ACTION_AFTER_TARGET_DT (SPID_ACTION);#(lf)#(lf)#(lf)/* complete listing of all program activity for students that are targeted by this report*/#(lf)IF OBJECT_ID('tempdb..#PRGMZ') IS NOT NULL#(lf)    DROP TABLE #PRGMZ#(lf)#(lf)SELECT  SP.STUDENT_PROGRAMS_ID,#(lf)LEFT(SP.STUDENT_PROGRAMS_ID,7) AS STUDENT_ID,#(lf)SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,32) AS PROGRAM_ID,#(lf)SP.STPR_LOCATION,#(lf)CAST(STPR_START_DATE AS DATE) AS STPR_START_DATE,#(lf)CAST(STPR_END_DATE AS DATE)   AS STP_END_DATE_ORIG,#(lf)CAST(ISNULL(SD.STPR_END_DATE, '12/31/2099') AS DATE)  AS STPR_END_DATE_CALC,#(lf)SS.STPR_STATUS AS LAST_KNOWN_STATUS#(lf)INTO #PRGMZ#(lf)FROM STUDENT_PROGRAMS SP#(lf)JOIN #SPID_ACTION_AFTER_TARGET_DT SA ON SA.SPID_ACTION = SP.STUDENT_PROGRAMS_ID#(lf)JOIN #DID_ATTEND DID_ATTEND ON DID_ATTEND.ENROLLED_STUDENT_ID = LEFT(SP.STUDENT_PROGRAMS_ID,7)#(lf)JOIN STPR_DATES SD ON SP.STUDENT_PROGRAMS_ID = SD.STUDENT_PROGRAMS_ID#(lf)                   AND SD.STPR_START_DATE < ISNULL(SD.STPR_END_DATE, '12/31/2099')#(lf)JOIN STPR_STATUSES SS ON SS.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID AND SS.POS = 1 ;#(lf)#(lf)create nonclustered index PRGMZ_IDX_SPID on #PRGMZ (STUDENT_PROGRAMS_ID);#(lf)create nonclustered index PRGMZ_IDX_SID  on #PRGMZ (STUDENT_ID);#(lf)create nonclustered index PRGMZ_IDX_PID  on #PRGMZ (PROGRAM_ID);#(lf)#(lf)/* spliting the program data into 2 parts  1 for all studentes who were only ever in 1 program.  knowing this allows me to#(lf)   assign a program even if the dates are inconsistant with the actual enrollments;  can't dot that for multi-pgm students#(lf)   but this helps clean up some of the records gathered by this extraction routine*/#(lf)#(lf)IF OBJECT_ID('tempdb..#SINGLE_PGM') IS NOT NULL     DROP TABLE #SINGLE_PGM;#(lf)SELECT PRGMZ.*#(lf)INTO #SINGLE_PGM#(lf)FROM #PRGMZ PRGMZ#(lf)JOIN (#(lf)SELECT STUDENT_ID AS SID, COUNT(DISTINCT PROGRAM_ID ) SIDCNT#(lf)FROM #PRGMZ#(lf)GROUP BY STUDENT_ID#(lf)HAVING  COUNT(DISTINCT PROGRAM_ID ) = 1) X ON X.SID = STUDENT_ID;#(lf)create nonclustered index SP_IDX_SPID on #SINGLE_PGM(STUDENT_PROGRAMS_ID);#(lf)create nonclustered index SP_IDX_SID  on #SINGLE_PGM (STUDENT_ID);#(lf)create nonclustered index SP_IDX_PID  on #SINGLE_PGM (PROGRAM_ID);#(lf)#(lf)#(lf)/* these are the students having more than 1 program*/#(lf)IF OBJECT_ID('tempdb..#GET_PROGRAM') IS NOT NULL  DROP TABLE #GET_PROGRAM;#(lf)SELECT PRGMZ.* INTO #GET_PROGRAM#(lf)FROM #PRGMZ PRGMZ#(lf)LEFT JOIN (#(lf)SELECT STUDENT_ID AS SID, COUNT(DISTINCT PROGRAM_ID ) SIDCNT#(lf)FROM #PRGMZ#(lf)GROUP BY STUDENT_ID#(lf)HAVING  COUNT(DISTINCT PROGRAM_ID ) = 1#(lf)) X ON X.SID = STUDENT_ID#(lf)WHERE X.SID IS NULL;#(lf)create nonclustered index GP_IDX_SPID on #GET_PROGRAM (STUDENT_PROGRAMS_ID);#(lf)create nonclustered index GP_IDX_SID  on #GET_PROGRAM (STUDENT_ID);#(lf)create nonclustered index GP_IDX_PID  on #GET_PROGRAM (PROGRAM_ID);#(lf)#(lf)#(lf)/*  start transfer protocol*/#(lf)/*  gather information on all students who transfered programs.  The assumption is that if the student did not */#(lf)/*  complete a program AND they have a later program they might have transferred. */#(lf)/*  start by getting a list (in order) of all programs that a student has registered */#(lf)#(lf)IF OBJECT_ID('tempdb..#STUDENT_PROGRAM_ORDER') IS NOT NULL     DROP TABLE #STUDENT_PROGRAM_ORDER;#(lf)#(lf)SELECT SUBSTRING(SP.STUDENT_PROGRAMS_ID,1, 7)   AS PO_STUDENT_ID,#(lf)       SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, 32)  AS PO_PROGRAM_ID,#(lf)  MIN(STPR_START_DATE) AS PO_PGM_START,#(lf)  MAX(ISNULL(STPR_END_DATE, '12/31/3000')) AS PO_PGM_END,#(lf)  ROW_NUMBER() OVER (PARTITION BY SUBSTRING(SP.STUDENT_PROGRAMS_ID,1, 7)#(lf)                         ORDER BY SUBSTRING(SP.STUDENT_PROGRAMS_ID,1, 7) ,  MIN(STPR_START_DATE) ASC) AS PO_POSITION#(lf)INTO #STUDENT_PROGRAM_ORDER#(lf)FROM STUDENT_PROGRAMS SP#(lf)JOIN (SELECT DISTINCT PROGRAM_ID AS PID FROM #PRGMZ) P ON P.PID = SUBSTRING(SP.STUDENT_PROGRAMS_ID, 9,32)#(lf)JOIN STPR_DATES SD ON SP.STUDENT_PROGRAMS_ID = SD.STUDENT_PROGRAMS_ID#(lf)                    AND SD.STPR_START_DATE < ISNULL(STPR_END_DATE, '12/31/3000')#(lf)AND SD.STPR_START_DATE >= '1/1/2020'#(lf)JOIN STPR_STATUSES SS ON SS.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID AND SS.POS = 1#(lf)JOIN (SELECT DISTINCT STUDENT_PROGRAMS_ID AS SPID FROM STPR_STATUSES WHERE STPR_STATUS NOT IN ('C', 'X', 'P')) DSTAT ON DSTAT.SPID = SS.STUDENT_PROGRAMS_ID#(lf)GROUP BY SUBSTRING(SP.STUDENT_PROGRAMS_ID,1, 7) , SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, 32);#(lf)#(lf)#(lf)/* next, we will join the order to get the ""from_pgm""  going ""to_program*/#(lf)IF OBJECT_ID('tempdb..#STUDENT_PROGRAM_ORDER_FINAL') IS NOT NULL#(lf)    DROP TABLE #STUDENT_PROGRAM_ORDER_FINAL#(lf)#(lf)SELECT P1.PO_STUDENT_ID, P1.PO_PROGRAM_ID AS SPOF_FROM_PGM, P2.PO_PROGRAM_ID AS SPOF_TO_PGM#(lf)INTO #STUDENT_PROGRAM_ORDER_FINAL#(lf)FROM #STUDENT_PROGRAM_ORDER P1#(lf)JOIN #STUDENT_PROGRAM_ORDER P2#(lf)   ON  P1.PO_STUDENT_ID = P2.PO_STUDENT_ID#(lf)   AND P1.PO_POSITION + 1 = P2.PO_POSITION;#(lf)create nonclustered index SPOF_IDX_SID  on #STUDENT_PROGRAM_ORDER_FINAL (PO_STUDENT_ID);#(lf)#(lf)/*logic is to create a list of all students by program in order in which they took the program;  but only for the#(lf)  programs that the student has never finished.   then if they have multiple unfinished programs they may be a#(lf)  transfer;  place this in a termp table called XFER_ALL*/#(lf)IF OBJECT_ID('tempdb..#XFER_ALL') IS NOT NULL     DROP TABLE #XFER_ALL;#(lf)#(lf)SELECT STUDENT_ID, PROGRAM_ID, STUDENT_PROGRAMS_ID , STPR_START, STPR_END, PREV_STAT, PREV_PGM, POS#(lf)INTO #XFER_ALL#(lf) FROM (#(lf)SELECT STUDENT_ID, PROGRAM_ID, STUDENT_PROGRAMS_ID , STPR_START, STPR_END, PREV_STAT, PREV_PGM,#(lf)  ROW_NUMBER() OVER(PARTITION BY STUDENT_ID ORDER BY STUDENT_ID, STPR_START) AS POS#(lf)FROM (#(lf)/* join the programs in order they occured*/#(lf)SELECT * ,#(lf)Lag(STPR_STATUS, 1) OVER(PARTITION BY STUDENT_ID ORDER BY STUDENT_ID, POSORDER) AS PREV_STAT,#(lf)Lag(PROGRAM_ID , 1) OVER(PARTITION BY STUDENT_ID ORDER BY STUDENT_ID, POSORDER) AS PREV_PGM,#(lf)CASE#(lf)WHEN POSORDER = 1 THEN 0#(lf)WHEN Lag(STPR_STATUS, 1) OVER(PARTITION BY STUDENT_ID ORDER BY STUDENT_ID, POSORDER) = 'G' THEN 0#(lf)ELSE 1 END AS TRANSFER#(lf)   #(lf)#(lf)FROM (#(lf)       /* add a row number because the student may have transferred more than 1 time*/#(lf)SELECT ROW_NUMBER()#(lf)  OVER(PARTITION BY LEFT(STUDENT_PROGRAMS_ID, 7) ORDER BY LEFT(STUDENT_PROGRAMS_ID, 7), STPR_START) AS POSORDER,#(lf)  LEFT(STUDENT_PROGRAMS_ID, 7) AS STUDENT_ID, SUBSTRING(STUDENT_PROGRAMS_ID, 9,32) AS PROGRAM_ID,#(lf)  *#(lf)FROM (#(lf)     /* start with an student that was in more than 1 program*/#(lf)SELECT #GET_PROGRAM.STUDENT_PROGRAMS_ID, STPR_STATUS,#(lf)MIN(STPR_START_DATE) STPR_START, MAX(STPR_END_DATE_CALC) AS STPR_END#(lf)FROM #GET_PROGRAM#(lf)/* remove any student who was only potential/error in a program*/#(lf)JOIN (#(lf)SELECT STUDENT_PROGRAMS_ID, STPR_STATUS, STPR_STATUS_DATE,#(lf)ROW_NUMBER() OVER (PARTITION BY STUDENT_PROGRAMS_ID ORDER BY STUDENT_PROGRAMS_ID, STPR_STATUS_DATE DESC) POS#(lf)FROM STPR_STATUSES SS#(lf)WHERE 1=1 AND STPR_STATUS NOT IN ('P', 'X')#(lf)) SS ON SS.STUDENT_PROGRAMS_ID =  #GET_PROGRAM.STUDENT_PROGRAMS_ID AND SS.POS = 1#(lf)/* remove any spid where student never listed as active*/#(lf)                                    JOIN (SELECT DISTINCT STUDENT_PROGRAMS_ID ENROLLED_SPID#(lf)FROM STPR_STATUSES#(lf)WHERE STPR_STATUS IN ('A', 'E', 'W', 'G', 'C') )ES ON ES.ENROLLED_SPID = SS.STUDENT_PROGRAMS_ID#(lf)WHERE 1=1  #(lf)GROUP BY #GET_PROGRAM.STUDENT_PROGRAMS_ID, STPR_STATUS#(lf)) X1  #(lf)where X1.STPR_STATUS !='G'#(lf))X2#(lf))X3#(lf)WHERE TRANSFER = 1#(lf)) X4;#(lf)create nonclustered index XFALL_IDX_SID   on #XFER_ALL (STUDENT_ID);#(lf)create nonclustered index XFALL_IDX_PID   on #XFER_ALL (PROGRAM_ID);#(lf)create nonclustered index XFALL_IDX_SPID  on #XFER_ALL (STUDENT_PROGRAMS_ID);#(lf)#(lf)#(lf)/* THis is an important stpe.   We have to summarize data and JOIN the program order.*/#(lf)/* we only want this the look like a transfer IF the program follws the correct order.  It is possible for students to have many programs with galen */#(lf)/* as such,  they could move between them morethan once.   THis join to program order will ensure that we only keep the ones that are real transfers*/#(lf)IF OBJECT_ID('tempdb..#XFER_FINAL') IS NOT NULL     DROP TABLE #XFER_FINAL;#(lf)SELECT STUDENT_ID AS XFER_SID,  SPOF_FROM_PGM AS PREV_PGM , SPOF_TO_PGM AS FINAL_PROGRAM#(lf)INTO #XFER_FINAL#(lf)from #XFER_ALL X#(lf)JOIN #STUDENT_PROGRAM_ORDER_FINAL F ON X.STUDENT_ID = F.PO_STUDENT_ID#(lf)AND X.PROGRAM_ID = F.SPOF_TO_PGM#(lf)AND X.PREV_PGM   = F.SPOF_FROM_PGM;#(lf)create nonclustered index XFERF_IDX_SID  on #XFER_FINAL (XFER_SID);#(lf)/* end transfer protocol*/#(lf)#(lf)/* start cohort*/#(lf)/* For each student:  get the TERM that they started there first class with GALEN; add the PROGRAM they attempted*/#(lf)/* note that the program will be overriddend later for those student/programs where they transferred */#(lf)#(lf)IF OBJECT_ID('tempdb..#COHORT') IS NOT NULL  DROP TABLE #COHORT;#(lf)SELECT  #(lf)CONCAT(STUDENT_ID, '*', PROGRAM_ID) AS STUDENT_PROGRAMS_ID,  #(lf)STUDENT_ID,#(lf)PROGRAM_ID,#(lf)case  TERMS_ID#(lf)WHEN '201801C' THEN '2018SP1'#(lf)WHEN '201802C' THEN '2018SP2'#(lf)WHEN '201804C' THEN '2018SU1'#(lf)WHEN '201807C' THEN '2018SU2'#(lf)WHEN '201809C' THEN '2018FA1'#(lf)WHEN '201810C' THEN '2018FA2'#(lf)WHEN '201901C' THEN '2019SP1'#(lf)WHEN '201903C' THEN '2019SP2'#(lf)WHEN '201905C' THEN '2019SU1'#(lf)WHEN '201907C' THEN '2019SU2'#(lf)WHEN '201909C' THEN '2019FA1'#(lf)WHEN '201910C' THEN '2019FA2'#(lf)WHEN '202001C' THEN '2020SP1'#(lf)WHEN '202003C' THEN '2020SP2'#(lf)WHEN '202005C' THEN '2020SU1'#(lf)WHEN '202007C' THEN '2020SU2'#(lf)WHEN '202008C' THEN '2020FA1'#(lf)WHEN '202010C' THEN '2020FA2'#(lf)ELSE TERMS_ID END  AS COHORT_TERM,#(lf)TERM_START_DATE AS COHORT_START_DATE#(lf)INTO #COHORT#(lf)FROM (#(lf)#(lf)SELECT SEDV.STUDENT_ID,#(lf)  COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID) AS PROGRAM_ID,#(lf)  TERMS_ID,#(lf)  TERM_START_DATE,#(lf)  SEDV.SECTION_COURSE_NAME,#(lf)#(lf)ROW_NUMBER() OVER (PARTITION BY SEDV.STUDENT_ID , COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID)#(lf)ORDER BY SEDV.STUDENT_ID, COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID), TERM_START_DATE ASC) AS ROWZ#(lf)FROM  STUDENT_ENROLLMENT_DETAIL_VIEW SEDV#(lf)JOIN  TERMS ON TERMS.TERMS_ID = SEDV.ENROLL_TERM#(lf)          AND TERMS_ID != 'TRANSCR'#(lf)  AND TERMS.TERM_START_DATE <= GETDATE()#(lf)  AND TERMS.TERM_START_DATE >= '1/1/2020'#(lf)/*  special note that the STPR_DATES and STPR_STATUSES are FUBR so expect some duplication*/#(lf)LEFT JOIN #SINGLE_PGM SINGLE_PGM ON SINGLE_PGM.STUDENT_ID = SEDV.STUDENT_ID#(lf)#(lf)LEFT JOIN #SPID_ACTION_AFTER_TARGET_DT SPIDA_SP#(lf)                    ON SPIDA_SP.SPID_ACTION = SINGLE_PGM.STUDENT_PROGRAMS_ID#(lf)#(lf)LEFT JOIN #GET_PROGRAM GET_PROGRAM ON GET_PROGRAM.STUDENT_ID  = SEDV.STUDENT_ID#(lf)                                 AND ENROLL_START_DATE BETWEEN GET_PROGRAM.STPR_START_DATE AND GET_PROGRAM.STPR_END_DATE_CALC#(lf)#(lf)/* didn't need to do this in this fashion.   JOin to the #SPID_ACTION_AFTER_TARGET_DT to ensure that we dont keep any dates that are after#(lf)   the start of any program that ther student may have been on that ""overhag"" the target period.  Student might have been in a program#(lf)   before 1/1/2020;  then started a new one.   THis join throws those out */#(lf)#(lf)LEFT JOIN #SPID_ACTION_AFTER_TARGET_DT SPIDA_GP#(lf)      ON SPIDA_GP.SPID_ACTION = GET_PROGRAM.STUDENT_PROGRAMS_ID#(lf)#(lf)WHERE 1=1#(lf)AND    TERMS.TERM_START_DATE >=  COALESCE(SPIDA_SP.LASTACTION_STDT, SPIDA_GP.LASTACTION_STDT)#(lf)AND#(lf)( ENROLL_CURRENT_STATUS in ('Withdrawn','Add','New')#(lf)    or  #(lf)(ENROLL_CURRENT_STATUS = 'Dropped' and  ENROLL_CURRENT_STATUS_REASON in ('Viol of Code of Conduct','Program of Dir Discretion','Attendance Violation'))#(lf)   )#(lf)    ) FIND_ST_TERM#(lf)WHERE ROWZ = 1#(lf)AND PROGRAM_ID is NOT NULL;#(lf)#(lf)Create nonclustered index COHORT_IDX_SPID on #COHORT (STUDENT_PROGRAMS_ID);#(lf)create nonclustered index COHORT_IDX_SID  on #COHORT (STUDENT_ID);#(lf)create nonclustered index COHORT_IDX_PID  on #COHORT (PROGRAM_ID);  #(lf)#(lf)#(lf)/*  find all student_programs where the student graduated*/#(lf)IF OBJECT_ID('tempdb..#GRAD_DATEZ') IS NOT NULL DROP TABLE #GRAD_DATEZ;#(lf)SELECT STUDENT_PROGRAMS_ID, STPR_STATUS AS GRAD_STATUS, GRAD_DATE#(lf)INTO #GRAD_DATEZ#(lf)FROM (#(lf)SELECT#(lf)CASE WHEN STPR_STATUS_DATE BETWEEN SD1.STPR_START_DATE AND SD1.STPR_END_DATE                    THEN SD1.STPR_END_DATE#(lf)WHEN STPR_STATUS_DATE BETWEEN SD2.STPR_START_DATE AND SD2.STPR_END_DATE                    THEN SD2.STPR_END_DATE#(lf)WHEN STPR_STATUS_DATE BETWEEN SD3.STPR_START_DATE AND SD3.STPR_END_DATE                    THEN SD3.STPR_END_DATE#(lf)ELSE COALESCE(SD1.STPR_END_DATE, STPR_STATUS_DATE)   END  GRAD_DATE#(lf),SS.* ,#(lf)ROW_NUMBER() OVER (PARTITION BY SS.STUDENT_PROGRAMS_ID ORDER BY SS.STUDENT_PROGRAMS_ID, SS.STPR_STATUS_DATE) AS ROWZ#(lf)FROM STPR_STATUSES SS#(lf)LEFT JOIN STPR_DATES SD1 ON SS.STUDENT_PROGRAMS_ID = SD1.STUDENT_PROGRAMS_ID#(lf) AND  SD1.POS = 1 AND SD1.STPR_START_DATE <= ISNULL(SD1.STPR_END_DATE, '12/31/2099')#(lf)#(lf)LEFT JOIN STPR_DATES SD2 ON SS.STUDENT_PROGRAMS_ID = SD2.STUDENT_PROGRAMS_ID#(lf) AND  SD2.POS = 2 AND SD2.STPR_START_DATE <= ISNULL(SD2.STPR_END_DATE, '12/31/2099')#(lf)#(lf)LEFT JOIN STPR_DATES SD3 ON SS.STUDENT_PROGRAMS_ID = SD3.STUDENT_PROGRAMS_ID#(lf) AND  SD3.POS = 3 AND SD3.STPR_START_DATE <= ISNULL(SD3.STPR_END_DATE, '12/31/2099')#(lf)WHERE STPR_STATUS = 'G'#(lf)) XXX#(lf)WHERE ROWZ=1;#(lf)Create nonclustered index GD_IDX_SPID on #GRAD_DATEZ (STUDENT_PROGRAMS_ID);#(lf)#(lf)/* find all student_programs where academic records org has marked the student as having withdrawn from the program*/#(lf)IF OBJECT_ID('tempdb..#ACAD_REC_STATUS') IS NOT NULL DROP TABLE #ACAD_REC_STATUS;#(lf)#(lf)--SELECT DISTINCT STUDENT_PROGRAMS_ID, STPR_STATUS AS WITHDRAWL_STATUS, WITHDRAWAL_STATUS_DT#(lf)--INTO #ACAD_REC_STATUS#(lf)--FROM (#(lf)-- SELECT SS.STUDENT_PROGRAMS_ID, SS.POS, SS.STPR_STATUS,SS.STPR_STATUS_DATE,#(lf)-- COALESCE(SD.STPR_END_DATE, SD2.STPR_END_DATE, SD3.STPR_END_DATE, STPR_STATUS_DATE) AS WITHDRAWAL_STATUS_DT#(lf)-- FROM STPR_STATUSES SS#(lf)-- LEFT JOIN STPR_DATES SD ON SD.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID#(lf)--   AND SS.STPR_STATUS_DATE BETWEEN SD.STPR_START_DATE AND SD.STPR_END_DATE#(lf)--        LEFT JOIN STPR_DATES SD2 ON SD2.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID#(lf)--   AND DATEADD(DAY, -10, SS.STPR_STATUS_DATE) BETWEEN SD2.STPR_START_DATE AND SD2.STPR_END_DATE#(lf)--        LEFT JOIN STPR_DATES SD3 ON SD3.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID#(lf)--   AND DATEADD(DAY, 10, SS.STPR_STATUS_DATE) BETWEEN SD3.STPR_START_DATE AND SD3.STPR_END_DATE#(lf)-- WHERE SS.STPR_STATUS = 'W'#(lf)-- ) XXX;#(lf)--Create nonclustered index ARS_IDX_SPID on #ACAD_REC_STATUS (STUDENT_PROGRAMS_ID);#(lf)#(lf)#(lf)SELECT DISTINCT STUDENT_PROGRAMS_ID, STPR_STATUS AS WITHDRAWL_STATUS, WITHDRAWAL_STATUS_DT#(lf)INTO #ACAD_REC_STATUS#(lf)FROM (#(lf)SELECT SS.STUDENT_PROGRAMS_ID, SS.POS, SS.STPR_STATUS,SS.STPR_STATUS_DATE,#(lf)SD.STPR_END_DATE AS WITHDRAWAL_STATUS_DT#(lf)FROM STPR_STATUSES SS#(lf)INNER JOIN STPR_DATES SD ON SD.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID#(lf)INNER JOIN (SELECT DISTINCT TERM_START_DATE, TERM_DROP_GRADE_REQD_DATE#(lf)FROM TERMS) T ON SD.STPR_START_DATE = TERM_START_DATE#(lf)WHERE SS.STPR_STATUS = 'W'#(lf)--AND SS.POS = 1#(lf)AND SD.STPR_END_DATE > COALESCE(T.TERM_DROP_GRADE_REQD_DATE, DATEADD(DAY,7,T.TERM_START_DATE))#(lf)) XXX;#(lf)Create nonclustered index ARS_IDX_SPID on #ACAD_REC_STATUS (STUDENT_PROGRAMS_ID);#(lf)#(lf)#(lf)/**** Now using the STUDENT_ENROLLMENT_DETAIL_VIEW [SEDV] table (becuase it has the last state of the TERM_ENROLLMET), attach the#(lf)     Program_id and the Program_cohort to each Enrolled_Term.   {Enrolled term means I have an entry in there SEDV table#(lf)that was Either Active/New/Withdrawn or Dropped by Acadademic Records Team ****/#(lf)#(lf)/***  In some cases Acadademic Records Team may have created a HIatus record but not properly documented the STPR STATUS these#(lf)      are found using the STUDENT_HIATUS table ***/#(lf)#(lf)/** at the same time, I am adding the person Status within that Term.  For the purposes of this analysis I am categorizing each#(lf)    student as either Graduate , WIthdrawal or Active {if you didnt ""W"" or ""G"" you must be ""A""} **/#(lf)#(lf)#(lf)IF OBJECT_ID('tempdb..#TEMPCOHORT1') IS NOT NULL DROP TABLE #TEMPCOHORT1;#(lf)#(lf)SELECT DISTINCT#(lf)SEDV.STUDENT_ID,#(lf)COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID) AS PROGRAM_ID,#(lf)COHORT.COHORT_TERM,#(lf)FIRST_VALUE(TERMS.TERMS_ID) OVER (#(lf)        PARTITION BY SEDV.STUDENT_ID, COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID)#(lf)ORDER BY SEDV.STUDENT_ID, COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID), ENROLL_START_DATE DESC) AS LAST_COHORT ,#(lf)TERMS.TERMS_ID AS ENROLL_TERM,#(lf)TERMS.TERM_START_DATE ,#(lf)TERMS.TERM_END_DATE,#(lf)GRAD_DATEZ.GRAD_STATUS,#(lf)CASE WHEN ACAD_REC_STATUS.WITHDRAWL_STATUS ='W' OR STH_START_DATE IS NOT NULL THEN 'W' ELSE NULL END    AS WITHDRAW_STATUS,#(lf)CASE WHEN GRAD_DATEZ.GRAD_STATUS IS NULL#(lf)      AND ACAD_REC_STATUS.WITHDRAWL_STATUS IS NULL#(lf) AND STH_START_DATE IS NULL                                                      THEN 1 ELSE 0 END AS ACTIVE,#(lf)CASE WHEN GRAD_DATEZ.GRAD_STATUS ='G'                                                 THEN 1 ELSE 0 END AS GRADUATE,#(lf)CASE WHEN GRAD_DATEZ.GRAD_STATUS ='G' THEN 0#(lf)     WHEN ACAD_REC_STATUS.WITHDRAWL_STATUS ='W' OR STH_START_DATE IS NOT NULL         THEN 1 ELSE 0 END AS WITHDREW#(lf)INTO #TEMPCOHORT1#(lf)FROM STUDENT_ENROLLMENT_DETAIL_VIEW SEDV with (nolock)#(lf)#(lf)JOIN TERMS with (nolock)#(lf)     ON  TERM_START_DATE < GETDATE()#(lf)AND TERM_START_DATE >= '1/1/2020'#(lf)     AND TERMS.TERMS_ID =#(lf)   case  SEDV.ENROLL_TERM#(lf)--WHEN '201801C' THEN '2018SP1'#(lf)--WHEN '201802C' THEN '2018SP2'#(lf)--WHEN '201804C' THEN '2018SU1'#(lf)--WHEN '201807C' THEN '2018SU2'#(lf)--WHEN '201809C' THEN '2018FA1'#(lf)--WHEN '201810C' THEN '2018FA2'#(lf)--WHEN '201901C' THEN '2019SP1'#(lf)--WHEN '201903C' THEN '2019SP2'#(lf)--WHEN '201905C' THEN '2019SU1'#(lf)--WHEN '201907C' THEN '2019SU2'#(lf)--WHEN '201909C' THEN '2019FA1'#(lf)--WHEN '201910C' THEN '2019FA2'#(lf)WHEN '202001C' THEN '2020SP1'#(lf)WHEN '202003C' THEN '2020SP2'#(lf)WHEN '202005C' THEN '2020SU1'#(lf)WHEN '202007C' THEN '2020SU2'#(lf)WHEN '202008C' THEN '2020FA1'#(lf)WHEN '202010C' THEN '2020FA2'#(lf)ELSE SEDV.ENROLL_TERM END#(lf)#(lf)LEFT JOIN #SINGLE_PGM SINGLE_PGM  ON SINGLE_PGM.STUDENT_ID = SEDV.STUDENT_ID#(lf)#(lf)LEFT JOIN #GET_PROGRAM  GET_PROGRAM#(lf)       ON GET_PROGRAM.STUDENT_ID  = SEDV.STUDENT_ID#(lf)      AND ENROLL_START_DATE BETWEEN GET_PROGRAM.STPR_START_DATE AND GET_PROGRAM.STPR_END_DATE_CALC#(lf)#(lf)JOIN #COHORT COHORT ON COHORT.STUDENT_PROGRAMS_ID = CONCAT(SEDV.STUDENT_ID,'*', COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID))#(lf)#(lf)LEFT JOIN #GRAD_DATEZ GRAD_DATEZ ON GRAD_DATEZ.STUDENT_PROGRAMS_ID = CONCAT(SEDV.STUDENT_ID,'*', COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID))#(lf)                    AND GRAD_DATEZ.GRAD_DATE BETWEEN TERMS.TERM_START_DATE AND TERMS.TERM_END_DATE#(lf)#(lf)LEFT JOIN  #ACAD_REC_STATUS ACAD_REC_STATUS ON ACAD_REC_STATUS.STUDENT_PROGRAMS_ID = CONCAT(SEDV.STUDENT_ID,'*', COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID))#(lf)AND ACAD_REC_STATUS.WITHDRAWAL_STATUS_DT  BETWEEN TERMS.TERM_START_DATE AND TERMS.TERM_END_DATE#(lf)#(lf)LEFT JOIN (#(lf)SELECT STH_STUDENT, STH_TERM, MIN(STH_START_DATE) AS STH_START_DATE, ISNULL(MAX(STH_END_DATE), TERM_END_DATE) AS STH_END_DATE#(lf)FROM STUDENT_HIATUS  with (nolock)#(lf)JOIN WITHDRAW_REASONS WR ON WR.WITHDRAW_REASONS_ID = STH_REASON#(lf)JOIN TERMS ON TERMS.TERMS_ID = STH_TERM#(lf)WHERE  STH_CODE IN ('WTH', 'DIS') AND STH_REASON NOT IN  ('ZZ', 'WDPRO')#(lf)GROUP BY STH_STUDENT, STH_TERM, TERM_END_DATE#(lf)) HITAUS_WITHDRAWLS ON STH_STUDENT = SEDV.STUDENT_ID AND STH_TERM = SEDV.ENROLL_TERM#(lf)#(lf)WHERE 1=1#(lf)AND (SEDV.ENROLL_CURRENT_STATUS in ('Withdrawn','Add','New')#(lf)or  #(lf)(SEDV.ENROLL_CURRENT_STATUS = 'Dropped' and  SEDV.ENROLL_CURRENT_STATUS_REASON in ('Viol of Code of Conduct','Program of Dir Discretion','Attendance Violation'))#(lf))#(lf)AND COALESCE(SINGLE_PGM.PROGRAM_ID, GET_PROGRAM.PROGRAM_ID) IS NOT NULL;#(lf)#(lf)#(lf)/* renaming since i delete a step for speed */#(lf)IF OBJECT_ID('tempdb..#TERMOVERRIDE') IS NOT NULL DROP TABLE #TERMOVERRIDE;#(lf)SELECT STUDENT_ID, PROGRAM_ID,  COHORT_TERM AS COHORT_TERM_FIXED, LAST_COHORT AS LAST_COHORT_FIXED, ENROLL_TERM AS ENROLL_TERM_FIXED, TERM_START_DATE, TERM_END_DATE,#(lf)GRAD_STATUS, WITHDRAW_STATUS, ACTIVE, GRADUATE, WITHDREW#(lf)INTO #TERMOVERRIDE#(lf)FROM #TEMPCOHORT1;#(lf)CREATE NONCLUSTERED INDEX TERMOVER_IDX_SID on #TERMOVERRIDE (STUDENT_ID);#(lf)#(lf)/* in a Previous step, I derived the potential transfers. ( see table #XFER_FINAL).  Now records that are transferrees needs to be  */#(lf)/* restated to their origrinal program */#(lf)IF OBJECT_ID('tempdb..#ADDTRANSFER') IS NOT NULL DROP TABLE #ADDTRANSFER;#(lf)SELECT DISTINCT STUDENT_ID, PROGRAM_ID,  COHORT_TERM_FIXED, LAST_COHORT_FIXED, ENROLL_TERM_FIXED, TERMS.TERM_START_DATE, TERMS.TERM_END_DATE,#(lf)GRAD_STATUS, WITHDRAW_STATUS ,ACTIVE, GRADUATE, WITHDREW,#(lf)CASE WHEN #XFER_FINAL.XFER_SID = #TERMOVERRIDE.STUDENT_ID THEN 1 ELSE 0 END AS TRANSFER_STUDENT,#(lf)coalesce(#XFER_FINAL.FINAL_PROGRAM, PROGRAM_ID) AS TRANSFER_PROGRAM#(lf)INTO #ADDTRANSFER#(lf)FROM #TERMOVERRIDE#(lf)LEFT JOIN #XFER_FINAL  ON #XFER_FINAL.XFER_SID = #TERMOVERRIDE.STUDENT_ID AND #XFER_FINAL.PREV_PGM = #TERMOVERRIDE.PROGRAM_ID#(lf)LEFT JOIN TERMS        ON TERMS.TERMS_ID       = ENROLL_TERM_FIXED#(lf)ORDER BY STUDENT_ID, TERM_START_DATE;#(lf)CREATE NONCLUSTERED INDEX addxfer_IDX_SID on #ADDTRANSFER (STUDENT_ID);#(lf)CREATE NONCLUSTERED INDEX addxfer_IDX_PID on #ADDTRANSFER (PROGRAM_ID);#(lf)#(lf)/* now for the transfers we need to recalulate the COHORT.  It needs to ""backed up"" to the TERM_ID in which the student atteneded originally*/#(lf)IF OBJECT_ID('tempdb..#RESTATE_XFER_COHORT') IS NOT NULL DROP TABLE #RESTATE_XFER_COHORT;#(lf)SELECT#(lf)STUDENT_ID,PROGRAM_ID,#(lf)COHORT_TERM_FIXED,LAST_COHORT_FIXED,ENROLL_TERM_FIXED,#(lf)TERM_START_DATE,TERM_END_DATE,#(lf)GRAD_STATUS,WITHDRAW_STATUS,ACTIVE,GRADUATE,WITHDREW,#(lf)TRANSFER_STUDENT,TRANSFER_PROGRAM,#(lf)/* -- leave the NON_TRANSERS alone--*/#(lf)FIRST_VALUE(COHORT_TERM_FIXED) OVER (PARTITION BY STUDENT_ID, TRANSFER_PROGRAM ORDER BY STUDENT_ID, TERM_START_DATE ASC) AS TRANSFER_FIRST_COHORT_TERM,#(lf)/* -- leave the NON_TRANSERS alone--*/#(lf)FIRST_VALUE(LAST_COHORT_FIXED) OVER (PARTITION BY STUDENT_ID,TRANSFER_PROGRAM ORDER BY STUDENT_ID, TERM_START_DATE DESC) AS TRANSFER_LAST_COHORT_TERM#(lf)INTO #RESTATE_XFER_COHORT#(lf)FROM #ADDTRANSFER#(lf)ORDER BY STUDENT_ID, TERM_START_DATE;#(lf)#(lf)#(lf)/* add the calulation of the # of terms passed*/#(lf)/* NUM TERMS = ( ""Begining Term""  MINUS ""Ending Term"") +1  */#(lf)#(lf)IF OBJECT_ID('tempdb..#CALC_TERMS') IS NOT NULL  DROP TABLE #CALC_TERMS;#(lf)SELECT T2.* , #PROGRAM_TERMS.PCT100, #PROGRAM_TERMS.PCT150,#(lf)(LCH.POSITION - OCH.POSITION) + 1  AS NUM_TERMS,#(lf)CASE WHEN OCH.TERMTYPE = 'S' THEN DATEDIFF (MONTH, OCH.TC_START_DT, LCH.TC_END_DT) ELSE NULL END AS NUM_MONTHS,#(lf)ROW_NUMBER() OVER (PARTITION BY STUDENT_ID, TRANSFER_PROGRAM#(lf)                      ORDER BY  STUDENT_ID, TRANSFER_PROGRAM , TERM_START_DATE ASC) ROW_CNTR,#(lf)COUNT(*)     OVER (PARTITION BY STUDENT_ID, TRANSFER_PROGRAM  ) AS  TERM_CNTR#(lf)INTO #CALC_TERMS              #(lf)FROM #RESTATE_XFER_COHORT T2#(lf)LEFT JOIN #TERMCAL OCH ON OCH.TC_TERM = T2.TRANSFER_FIRST_COHORT_TERM#(lf)LEFT JOIN #TERMCAL LCH ON LCH.TC_TERM = T2.TRANSFER_LAST_COHORT_TERM#(lf)JOIN #PROGRAM_TERMS on #PROGRAM_TERMS.PT_PROGRAMS_ID = TRANSFER_PROGRAM COLLATE DATABASE_DEFAULT#(lf)ORDER BY STUDENT_ID, TERM_START_DATE;#(lf) #(lf)/* since thre can be None or Many location adjustments.  I attempt to show location changes using [STUDENT_PROGRAMS_HIST_LOG] table */#(lf)#(lf)/* everything gets loaded into a table called #RESULTS*/#(lf)IF OBJECT_ID('tempdb..#RESULTS') IS NOT NULL DROP TABLE #RESULTS;#(lf)#(lf)SELECT#(lf)STUDENT_ID,#(lf)PROGRAM_ID,#(lf)COHORT_TERM_FIXED,#(lf)LAST_COHORT_FIXED,#(lf)ENROLL_TERM_FIXED,#(lf)TERM_START_DATE,#(lf)TERM_END_DATE,#(lf)GRAD_STATUS,#(lf)CASE WHEN HIATUS_RECS.STH_REASON LIKE '%WDPRO%' THEN NULL ELSE WITHDRAW_STATUS END AS WITHDRAW_STATUS,#(lf)CASE WHEN HIATUS_RECS.STH_REASON LIKE '%WDPRO%' THEN 1 ELSE CT.ACTIVE END AS ACTIVE,#(lf)GRADUATE,#(lf)CASE WHEN HIATUS_RECS.STH_REASON LIKE '%WDPRO%' THEN NULL ELSE CT.WITHDREW END AS WITHDREW,#(lf)TRANSFER_STUDENT,#(lf)TRANSFER_PROGRAM,#(lf)TRANSFER_FIRST_COHORT_TERM,#(lf)TRANSFER_LAST_COHORT_TERM,#(lf)NUM_TERMS,#(lf)NUM_MONTHS,#(lf)PCT100, PCT150,#(lf)ROW_CNTR,#(lf)TERM_CNTR,#(lf)CASE WHEN ROW_CNTR = 1 THEN 1 WHEN ROW_CNTR = TERM_CNTR THEN 2 ELSE NULL END AS COMPRATE_FLAG,#(lf)#(lf)CASE WHEN LOCATION_LOG.SPID IS NULL OR LOCATION_LOG.LOCATION = SP.STPR_LOCATION    #(lf)     THEN 0 ELSE 1 END AS CHANGED_LOCATIONS,#(lf)#(lf)CASE WHEN LOCATION_LOG.SPID IS NOT NULL#(lf)     THEN LOCATION_LOG.LOCATION#(lf)ELSE SP.STPR_LOCATION END AS CALC_LOCATION,#(lf)#(lf)SP.STPR_LOCATION,#(lf)#(lf)CASE WHEN HIATUS_RECS.STH_REASON IS NOT NULL  AND HR.REASON_STRING IS NOT NULL#(lf)     THEN CONCAT(HIATUS_RECS.STH_REASON, ' | ', HR.REASON_STRING)#(lf)     ELSE COALESCE(HIATUS_RECS.STH_REASON, HR.REASON_STRING)#(lf)     END AS STH_REASON#(lf)#(lf)INTO #RESULTS#(lf)FROM #CALC_TERMS CT#(lf)#(lf)LEFT JOIN STUDENT_PROGRAMS      SP ON SP.STUDENT_PROGRAMS_ID = CONCAT(CT.STUDENT_ID, '*', CT.PROGRAM_ID)#(lf)LEFT JOIN (#(lf)SELECT STH_STUDENT, STH_TERM , STH_START_DATE,STH_END_DATE, STH_REASON#(lf)FROM (#(lf)SELECT STH_STUDENT, STH_TERM , STH_START_DATE,STH_END_DATE, STH_REASON , STUDENT_HIATUS_ID,#(lf)ROW_NUMBER() OVER (PARTITION BY STH_STUDENT, STH_TERM ORDER BY STH_STUDENT, STH_TERM, STUDENT_HIATUS_ID DESC) AS ROWZ#(lf)FROM STUDENT_HIATUS WHERE STH_REASON = 'WDPRO'   AND STH_TERM IS NOT NULL#(lf)) LIFO WHERE ROWZ=1#(lf)) HIATUS_RECS ON HIATUS_RECS.STH_STUDENT = CT.STUDENT_ID AND HIATUS_RECS.STH_TERM = ENROLL_TERM_FIXED#(lf)LEFT JOIN (#(lf)            SELECT STH_STUDENT, STH_TERM , STRING_AGG (SH.STH_REASON, ' | ') AS REASON_STRING#(lf)FROM STUDENT_HIATUS SH#(lf)join WITHDRAW_REASONS WR ON WR.WITHDRAW_REASONS_ID = SH.STH_REASON#(lf)AND UPPER(WDR_DESC) NOT LIKE '%CANCEL%'#(lf)AND UPPER(WDR_DESC) NOT LIKE '%UNKNOWN%'#(lf)AND UPPER(WDR_DESC) NOT LIKE '%DO%NO%USE%'#(lf)AND UPPER(WDR_DESC) NOT LIKE '%DON''T%USE%'#(lf)AND WR.WITHDRAW_REASONS_ID NOT IN ('ZZ', 'WDPRO')#(lf)GROUP BY STH_STUDENT, STH_TERM#(lf)) HR ON trim(HR.STH_STUDENT)       = trim(CT.STUDENT_ID)#(lf)   AND trim(HR.STH_TERM)          = trim(ENROLL_TERM_FIXED)#(lf)#(lf)LEFT JOIN (#(lf)SELECT  DISTINCT SPID, /* STUDENT_ID, PROGRAM_ID, */ CAST(LOCATION AS VARCHAR) AS LOCATION, POS,#(lf)        CAST(STPR_HL_DATE AS DATE) AS FROM_DATE,#(lf)        CAST(ISNULL( DATEADD(DAY, -1, LEAD( STPR_HL_DATE , 1) OVER (PARTITION BY SPID ORDER BY SPID, POS) ) , GETDATE()) AS DATE) AS TO_DATE#(lf)FROM (#(lf)   SELECT#(lf)   CAST(SPID AS VARCHAR) AS SPID,#(lf)CAST(STPR_HL_DATE AS DATE) AS STPR_HL_DATE,#(lf)CAST(POS AS INT) AS POS ,#(lf)CAST(#(lf)CASE WHEN POS = 0 THEN LEAD(OLD_LOCATION, 1) OVER (PARTITION BY SPID ORDER BY SPID, POS)#(lf)WHEN POS > 0 THEN NEW_LOCATION#(lf)ELSE 'XXXX' END#(lf)AS VARCHAR) AS LOCATION#(lf)      FROM (#(lf)SELECT DISTINCT#(lf)CAST(STUDENT_PROGRAMS_ID AS VARCHAR(35)) AS SPID,#(lf)CAST(NULL AS VARCHAR(3))  AS OLD_LOCATION,#(lf)CAST(NULL AS VARCHAR(3)) AS NEW_LOCATION,#(lf)CAST('1/1/2000'AS DATE) AS STPR_HL_DATE,#(lf)CAST(0 AS INT) AS POS#(lf)FROM (#(lf)SELECT DISTINCT STUDENT_PROGRAMS_HIST_LOG.[STPR_HL_RECORD_ID] AS STUDENT_PROGRAMS_ID#(lf)FROM STUDENT_PROGRAMS_HIST SPHIST#(lf)JOIN [STUDENT_PROGRAMS_HIST_LOG]#(lf) ON [SPHIST].STPR_HIST_LOG = [STUDENT_PROGRAMS_HIST_LOG].STUDENT_PROGRAMS_HIST_LOG_ID#(lf) AND [STPR_HIST_FIELD_NAME] ='STPR.LOCATION'#(lf) ) LOC_CHANGE#(lf)UNION ALL#(lf)#(lf)SELECT#(lf)CAST([STPR_HL_RECORD_ID] AS VARCHAR(35)) AS SPID,#(lf)CAST([STPR_HIST_OLD_VALUES] AS VARCHAR(3)) AS OLD_LOCATION,#(lf)CAST([STPR_HIST_NEW_VALUES] AS VARCHAR(3)) AS NEW_LOCATION,#(lf)CAST([STUDENT_PROGRAMS_HIST_LOG].STPR_HL_DATE AS DATE)      AS STPR_HL_DATE ,#(lf)ROW_NUMBER() OVER (PARTITION BY [STPR_HL_RECORD_ID] ORDER BY [STPR_HL_RECORD_ID], [STUDENT_PROGRAMS_HIST_LOG].STPR_HL_DATE) AS POS#(lf)FROM [STUDENT_PROGRAMS_HIST] SPHIST#(lf)#(lf)JOIN [STUDENT_PROGRAMS_HIST_LOG]#(lf) ON [SPHIST].STPR_HIST_LOG = [STUDENT_PROGRAMS_HIST_LOG].STUDENT_PROGRAMS_HIST_LOG_ID#(lf) AND [STPR_HIST_FIELD_NAME] ='STPR.LOCATION'#(lf))TEMP1#(lf)) TEMP2#(lf)) LOCATION_LOG ON LOCATION_LOG.SPID = CONCAT(CT.STUDENT_ID, '*', CT.PROGRAM_ID)#(lf)             AND CT.TERM_END_DATE BETWEEN LOCATION_LOG.FROM_DATE AND LOCATION_LOG.TO_DATE#(lf)#(lf)#(lf)ORDER BY STUDENT_ID, TERM_START_DATE;#(lf)#(lf)IF OBJECT_ID('tempdb..#RESULTS2') IS NOT NULL DROP TABLE #RESULTS2;#(lf)#(lf)SELECT#(lf)STUDENT_ID,#(lf)PROGRAM_ID,#(lf)COHORT_TERM_FIXED,#(lf)LAST_COHORT_FIXED,#(lf)ENROLL_TERM_FIXED,#(lf)TERM_START_DATE,#(lf)TERM_END_DATE,#(lf)GRAD_STATUS,#(lf)WITHDRAW_STATUS,#(lf)ACTIVE,#(lf)GRADUATE,#(lf)WITHDREW,#(lf)TRANSFER_STUDENT,#(lf)TRANSFER_PROGRAM,#(lf)TRANSFER_FIRST_COHORT_TERM,#(lf)CASE WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SPQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 1)#(lf)     WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SP1%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 1.1)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SP2%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 1.2)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SUQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 2)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SU1%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 2.1)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SU2%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 2.2)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%FAQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 3)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%FA1%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 3.1)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%FA2%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 3.2)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%WIQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 4)#(lf)END AS COHORT_TERM_RANK,#(lf)TRANSFER_LAST_COHORT_TERM,#(lf)NUM_TERMS,#(lf)NUM_MONTHS,#(lf)PCT100,#(lf)PCT150,#(lf)ROW_CNTR,#(lf)TERM_CNTR,#(lf)COMPRATE_FLAG,#(lf)CHANGED_LOCATIONS,#(lf)CALC_LOCATION,#(lf)STPR_LOCATION,#(lf)STH_REASON,#(lf)WITHDRAW_REASONS.WDR_DESC as WITHDRAW_DESC#(lf)INTO #RESULTS2#(lf)FROM #RESULTS#(lf)LEFT JOIN WITHDRAW_REASONS ON #RESULTS.STH_REASON = WITHDRAW_REASONS.WITHDRAW_REASONS_ID#(lf)WHERE 1=0#(lf)UNION#(lf)#(lf)SELECT#(lf)STUDENT_ID,#(lf)PROGRAM_ID,#(lf)COHORT_TERM_FIXED,#(lf)LAST_COHORT_FIXED,#(lf)ENROLL_TERM_FIXED,#(lf)TERM_START_DATE,#(lf)TERM_END_DATE,#(lf)GRAD_STATUS,#(lf)WITHDRAW_STATUS,#(lf)ACTIVE,#(lf)GRADUATE,#(lf)WITHDREW,#(lf)TRANSFER_STUDENT,#(lf)TRANSFER_PROGRAM,#(lf)TRANSFER_FIRST_COHORT_TERM,#(lf)CASE WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SPQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 1)#(lf)     WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SP1%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 1.1)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SP2%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 1.2)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SUQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 2)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SU1%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 2.1)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SU2%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 2.2)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%FAQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 3)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%FA1%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 3.1)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%FA2%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 3.2)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%WIQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 4)#(lf)END AS COHORT_TERM_RANK,#(lf)TRANSFER_LAST_COHORT_TERM,#(lf)NUM_TERMS,#(lf)NUM_MONTHS,#(lf)PCT100,#(lf)PCT150,#(lf)ROW_CNTR,#(lf)TERM_CNTR,#(lf)COMPRATE_FLAG,#(lf)CHANGED_LOCATIONS,#(lf)CALC_LOCATION,#(lf)STPR_LOCATION,#(lf)STH_REASON,#(lf)WITHDRAW_REASONS.WDR_DESC as WITHDRAW_DESC#(lf)FROM #RESULTS#(lf)LEFT JOIN WITHDRAW_REASONS ON #RESULTS.STH_REASON = WITHDRAW_REASONS.WITHDRAW_REASONS_ID#(lf)JOIN (select STUDENT_ID AS SID, TRANSFER_PROGRAM AS PID , MIN(COMPRATE_FLAG) AS CRF FROM #RESULTS GROUP BY STUDENT_ID, TRANSFER_PROGRAM) X#(lf)ON STUDENT_ID = SID AND TRANSFER_PROGRAM = PID AND COMPRATE_FLAG = CRF#(lf)WHERE 1=0#(lf)#(lf)UNION#(lf)SELECT#(lf)STUDENT_ID,#(lf)PROGRAM_ID,#(lf)COHORT_TERM_FIXED,#(lf)LAST_COHORT_FIXED,#(lf)ENROLL_TERM_FIXED,#(lf)TERM_START_DATE,#(lf)TERM_END_DATE,#(lf)GRAD_STATUS,#(lf)WITHDRAW_STATUS,#(lf)ACTIVE,#(lf)GRADUATE,#(lf)WITHDREW,#(lf)TRANSFER_STUDENT,#(lf)TRANSFER_PROGRAM,#(lf)TRANSFER_FIRST_COHORT_TERM,#(lf)CASE WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SPQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 10)#(lf)     WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SP1%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 11)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SP2%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 12)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SUQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 20)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SU1%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 21)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%SU2%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 22)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%FAQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 30)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%FA1%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 31)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%FA2%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 32)#(lf)WHEN TRANSFER_FIRST_COHORT_TERM LIKE '%WIQ%' THEN CONCAT(LEFT(TRANSFER_FIRST_COHORT_TERM, 4), 40)#(lf)END AS COHORT_TERM_RANK,#(lf)TRANSFER_LAST_COHORT_TERM,#(lf)NUM_TERMS,#(lf)NUM_MONTHS,#(lf)PCT100,#(lf)PCT150,#(lf)ROW_CNTR,#(lf)TERM_CNTR,#(lf)2 AS COMPRATE_FLAG,#(lf)CHANGED_LOCATIONS,#(lf)CALC_LOCATION,#(lf)STPR_LOCATION,#(lf)STH_REASON,#(lf)WITHDRAW_REASONS.WDR_DESC as WITHDRAW_DESC#(lf)FROM #RESULTS#(lf)LEFT JOIN WITHDRAW_REASONS ON #RESULTS.STH_REASON = WITHDRAW_REASONS.WITHDRAW_REASONS_ID#(lf)JOIN (select STUDENT_ID AS SID, TRANSFER_PROGRAM AS PID , MAX(COMPRATE_FLAG) AS CRF FROM #RESULTS GROUP BY STUDENT_ID, TRANSFER_PROGRAM) X#(lf)ON STUDENT_ID = SID AND TRANSFER_PROGRAM = PID AND COMPRATE_FLAG = CRF#(lf)WHERE 1=1  #(lf)ORDER BY STUDENT_ID, TERM_START_DATE#(lf)#(lf)OPTION (RECOMPILE)#(lf)/* end of original */#(lf)#(lf)--select STUDENT_ID, COUNT(DISTINCT PROGRAM_ID) from #PRGMZ GROUP BY STUDENT_ID#(lf)--select * from #PRGMZ#(lf)--select * from #SINGLE_PGM#(lf)--select * from #GET_PROGRAM#(lf)--select * from #STUDENT_PROGRAM_ORDER_FINAL#(lf)--select * from #STUDENT_PROGRAM_ORDER#(lf)--select * from #XFER_ALL#(lf)--select * from #COHORT#(lf)--select * from #GET_PROGRAM#(lf)--select * from #RESULTS2#(lf)#(lf)#(lf)--IF OBJECT_ID('tempdb..#RESULTS3') IS NOT NULL  DROP TABLE #RESULTS3;#(lf)#(lf)DELETE FROM #RESULTS2 WHERE STPR_LOCATION = 'RIC' AND PROGRAM_ID = 'ADN.BRDG.AS'#(lf)DELETE FROM #RESULTS2 WHERE STPR_LOCATION = 'SAN' AND PROGRAM_ID = 'ADN.BRDG.AS'#(lf)DELETE FROM #RESULTS2 WHERE PROGRAM_ID = 'ADN-BRDG-AAS'#(lf)SELECT * FROM #RESULTS2#(lf)--SELECT * FROM #RESULTS#(lf)"])
				in
				    Source

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

